// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	BlockHeader
	BlockID
	PartSetHeader
	Validator
	Evidence
	Address
	Transaction
	PluginCode
	Request
	Response
	Message
	ContractMeta
	ContractMethodCall
	ContractMethodCallJSON
	Context
	MetaRequest
	ContractCallRequest
	InitResponse
	GetRequest
	GetResponse
	HasRequest
	HasResponse
	CallRequest
	CallResponse
	EmitRequest
	EmitResponse
	SetRequest
	SetResponse
	DeleteRequest
	DeleteResponse
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EncodingType int32

const (
	EncodingType_JSON      EncodingType = 0
	EncodingType_PROTOBUF3 EncodingType = 1
)

var EncodingType_name = map[int32]string{
	0: "JSON",
	1: "PROTOBUF3",
}
var EncodingType_value = map[string]int32{
	"JSON":      0,
	"PROTOBUF3": 1,
}

func (x EncodingType) String() string {
	return proto.EnumName(EncodingType_name, int32(x))
}
func (EncodingType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type BlockHeader struct {
	ChainID        string  `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height         int64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Time           int64   `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	NumTxs         int32   `protobuf:"varint,4,opt,name=num_txs,json=numTxs,proto3" json:"num_txs,omitempty"`
	LastBlockID    BlockID `protobuf:"bytes,5,opt,name=last_block_id,json=lastBlockId" json:"last_block_id"`
	LastCommitHash []byte  `protobuf:"bytes,6,opt,name=last_commit_hash,json=lastCommitHash,proto3" json:"last_commit_hash,omitempty"`
	DataHash       []byte  `protobuf:"bytes,7,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	ValidatorsHash []byte  `protobuf:"bytes,8,opt,name=validators_hash,json=validatorsHash,proto3" json:"validators_hash,omitempty"`
	AppHash        []byte  `protobuf:"bytes,9,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *BlockHeader) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *BlockHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BlockHeader) GetNumTxs() int32 {
	if m != nil {
		return m.NumTxs
	}
	return 0
}

func (m *BlockHeader) GetLastBlockID() BlockID {
	if m != nil {
		return m.LastBlockID
	}
	return BlockID{}
}

func (m *BlockHeader) GetLastCommitHash() []byte {
	if m != nil {
		return m.LastCommitHash
	}
	return nil
}

func (m *BlockHeader) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *BlockHeader) GetValidatorsHash() []byte {
	if m != nil {
		return m.ValidatorsHash
	}
	return nil
}

func (m *BlockHeader) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

type BlockID struct {
	Hash  []byte        `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Parts PartSetHeader `protobuf:"bytes,2,opt,name=parts" json:"parts"`
}

func (m *BlockID) Reset()                    { *m = BlockID{} }
func (m *BlockID) String() string            { return proto.CompactTextString(m) }
func (*BlockID) ProtoMessage()               {}
func (*BlockID) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *BlockID) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockID) GetParts() PartSetHeader {
	if m != nil {
		return m.Parts
	}
	return PartSetHeader{}
}

type PartSetHeader struct {
	Total int32  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *PartSetHeader) Reset()                    { *m = PartSetHeader{} }
func (m *PartSetHeader) String() string            { return proto.CompactTextString(m) }
func (*PartSetHeader) ProtoMessage()               {}
func (*PartSetHeader) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *PartSetHeader) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PartSetHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type Validator struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Power  int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *Validator) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Validator) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type Evidence struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Evidence) Reset()                    { *m = Evidence{} }
func (m *Evidence) String() string            { return proto.CompactTextString(m) }
func (*Evidence) ProtoMessage()               {}
func (*Evidence) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *Evidence) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Evidence) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Address struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Local   []byte `protobuf:"bytes,2,opt,name=local,proto3" json:"local,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *Address) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Address) GetLocal() []byte {
	if m != nil {
		return m.Local
	}
	return nil
}

type Transaction struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *Transaction) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Transaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PluginCode struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Input []byte `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (m *PluginCode) Reset()                    { *m = PluginCode{} }
func (m *PluginCode) String() string            { return proto.CompactTextString(m) }
func (*PluginCode) ProtoMessage()               {}
func (*PluginCode) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *PluginCode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PluginCode) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

type Request struct {
	ContentType EncodingType `protobuf:"varint,1,opt,name=content_type,json=contentType,proto3,enum=EncodingType" json:"content_type,omitempty"`
	Accept      EncodingType `protobuf:"varint,2,opt,name=accept,proto3,enum=EncodingType" json:"accept,omitempty"`
	Body        []byte       `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *Request) GetContentType() EncodingType {
	if m != nil {
		return m.ContentType
	}
	return EncodingType_JSON
}

func (m *Request) GetAccept() EncodingType {
	if m != nil {
		return m.Accept
	}
	return EncodingType_JSON
}

func (m *Request) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Response struct {
	ContentType EncodingType `protobuf:"varint,1,opt,name=content_type,json=contentType,proto3,enum=EncodingType" json:"content_type,omitempty"`
	Body        []byte       `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *Response) GetContentType() EncodingType {
	if m != nil {
		return m.ContentType
	}
	return EncodingType_JSON
}

func (m *Response) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Message struct {
	Sender *Address `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *Message) GetSender() *Address {
	if m != nil {
		return m.Sender
	}
	return nil
}

type ContractMeta struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ContractMeta) Reset()                    { *m = ContractMeta{} }
func (m *ContractMeta) String() string            { return proto.CompactTextString(m) }
func (*ContractMeta) ProtoMessage()               {}
func (*ContractMeta) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *ContractMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContractMeta) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// TODO: combine these two into one?
type ContractMethodCall struct {
	Method string               `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Data   *google_protobuf.Any `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *ContractMethodCall) Reset()                    { *m = ContractMethodCall{} }
func (m *ContractMethodCall) String() string            { return proto.CompactTextString(m) }
func (*ContractMethodCall) ProtoMessage()               {}
func (*ContractMethodCall) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *ContractMethodCall) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *ContractMethodCall) GetData() *google_protobuf.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type ContractMethodCallJSON struct {
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ContractMethodCallJSON) Reset()                    { *m = ContractMethodCallJSON{} }
func (m *ContractMethodCallJSON) String() string            { return proto.CompactTextString(m) }
func (*ContractMethodCallJSON) ProtoMessage()               {}
func (*ContractMethodCallJSON) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

func (m *ContractMethodCallJSON) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *ContractMethodCallJSON) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Context struct {
}

func (m *Context) Reset()                    { *m = Context{} }
func (m *Context) String() string            { return proto.CompactTextString(m) }
func (*Context) ProtoMessage()               {}
func (*Context) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

type MetaRequest struct {
}

func (m *MetaRequest) Reset()                    { *m = MetaRequest{} }
func (m *MetaRequest) String() string            { return proto.CompactTextString(m) }
func (*MetaRequest) ProtoMessage()               {}
func (*MetaRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

type ContractCallRequest struct {
	Block           *BlockHeader `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Message         *Message     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	ContractAddress *Address     `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress" json:"contract_address,omitempty"`
	ApiServer       uint32       `protobuf:"varint,4,opt,name=api_server,json=apiServer,proto3" json:"api_server,omitempty"`
	Request         *Request     `protobuf:"bytes,5,opt,name=request" json:"request,omitempty"`
}

func (m *ContractCallRequest) Reset()                    { *m = ContractCallRequest{} }
func (m *ContractCallRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractCallRequest) ProtoMessage()               {}
func (*ContractCallRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

func (m *ContractCallRequest) GetBlock() *BlockHeader {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ContractCallRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ContractCallRequest) GetContractAddress() *Address {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *ContractCallRequest) GetApiServer() uint32 {
	if m != nil {
		return m.ApiServer
	}
	return 0
}

func (m *ContractCallRequest) GetRequest() *Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type InitResponse struct {
}

func (m *InitResponse) Reset()                    { *m = InitResponse{} }
func (m *InitResponse) String() string            { return proto.CompactTextString(m) }
func (*InitResponse) ProtoMessage()               {}
func (*InitResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{17} }

type GetRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{18} }

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetResponse struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{19} }

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type HasRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *HasRequest) Reset()                    { *m = HasRequest{} }
func (m *HasRequest) String() string            { return proto.CompactTextString(m) }
func (*HasRequest) ProtoMessage()               {}
func (*HasRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{20} }

func (m *HasRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type HasResponse struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *HasResponse) Reset()                    { *m = HasResponse{} }
func (m *HasResponse) String() string            { return proto.CompactTextString(m) }
func (*HasResponse) ProtoMessage()               {}
func (*HasResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{21} }

func (m *HasResponse) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type CallRequest struct {
	Address *Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Input   []byte   `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
}

func (m *CallRequest) Reset()                    { *m = CallRequest{} }
func (m *CallRequest) String() string            { return proto.CompactTextString(m) }
func (*CallRequest) ProtoMessage()               {}
func (*CallRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{22} }

func (m *CallRequest) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CallRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

type CallResponse struct {
	Output []byte `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *CallResponse) Reset()                    { *m = CallResponse{} }
func (m *CallResponse) String() string            { return proto.CompactTextString(m) }
func (*CallResponse) ProtoMessage()               {}
func (*CallResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{23} }

func (m *CallResponse) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

type EmitRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EmitRequest) Reset()                    { *m = EmitRequest{} }
func (m *EmitRequest) String() string            { return proto.CompactTextString(m) }
func (*EmitRequest) ProtoMessage()               {}
func (*EmitRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{24} }

func (m *EmitRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type EmitResponse struct {
}

func (m *EmitResponse) Reset()                    { *m = EmitResponse{} }
func (m *EmitResponse) String() string            { return proto.CompactTextString(m) }
func (*EmitResponse) ProtoMessage()               {}
func (*EmitResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{25} }

type SetRequest struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SetRequest) Reset()                    { *m = SetRequest{} }
func (m *SetRequest) String() string            { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()               {}
func (*SetRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{26} }

func (m *SetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SetResponse struct {
}

func (m *SetResponse) Reset()                    { *m = SetResponse{} }
func (m *SetResponse) String() string            { return proto.CompactTextString(m) }
func (*SetResponse) ProtoMessage()               {}
func (*SetResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{27} }

type DeleteRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{28} }

func (m *DeleteRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{29} }

func init() {
	proto.RegisterType((*BlockHeader)(nil), "BlockHeader")
	proto.RegisterType((*BlockID)(nil), "BlockID")
	proto.RegisterType((*PartSetHeader)(nil), "PartSetHeader")
	proto.RegisterType((*Validator)(nil), "Validator")
	proto.RegisterType((*Evidence)(nil), "Evidence")
	proto.RegisterType((*Address)(nil), "Address")
	proto.RegisterType((*Transaction)(nil), "Transaction")
	proto.RegisterType((*PluginCode)(nil), "PluginCode")
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*ContractMeta)(nil), "ContractMeta")
	proto.RegisterType((*ContractMethodCall)(nil), "ContractMethodCall")
	proto.RegisterType((*ContractMethodCallJSON)(nil), "ContractMethodCallJSON")
	proto.RegisterType((*Context)(nil), "Context")
	proto.RegisterType((*MetaRequest)(nil), "MetaRequest")
	proto.RegisterType((*ContractCallRequest)(nil), "ContractCallRequest")
	proto.RegisterType((*InitResponse)(nil), "InitResponse")
	proto.RegisterType((*GetRequest)(nil), "GetRequest")
	proto.RegisterType((*GetResponse)(nil), "GetResponse")
	proto.RegisterType((*HasRequest)(nil), "HasRequest")
	proto.RegisterType((*HasResponse)(nil), "HasResponse")
	proto.RegisterType((*CallRequest)(nil), "CallRequest")
	proto.RegisterType((*CallResponse)(nil), "CallResponse")
	proto.RegisterType((*EmitRequest)(nil), "EmitRequest")
	proto.RegisterType((*EmitResponse)(nil), "EmitResponse")
	proto.RegisterType((*SetRequest)(nil), "SetRequest")
	proto.RegisterType((*SetResponse)(nil), "SetResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterEnum("EncodingType", EncodingType_name, EncodingType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Contract service

type ContractClient interface {
	Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*ContractMeta, error)
	Init(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Call(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*Response, error)
	StaticCall(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*Response, error)
}

type contractClient struct {
	cc *grpc.ClientConn
}

func NewContractClient(cc *grpc.ClientConn) ContractClient {
	return &contractClient{cc}
}

func (c *contractClient) Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*ContractMeta, error) {
	out := new(ContractMeta)
	err := grpc.Invoke(ctx, "/Contract/Meta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Init(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := grpc.Invoke(ctx, "/Contract/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) Call(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/Contract/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractClient) StaticCall(ctx context.Context, in *ContractCallRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/Contract/StaticCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contract service

type ContractServer interface {
	Meta(context.Context, *MetaRequest) (*ContractMeta, error)
	Init(context.Context, *ContractCallRequest) (*InitResponse, error)
	Call(context.Context, *ContractCallRequest) (*Response, error)
	StaticCall(context.Context, *ContractCallRequest) (*Response, error)
}

func RegisterContractServer(s *grpc.Server, srv ContractServer) {
	s.RegisterService(&_Contract_serviceDesc, srv)
}

func _Contract_Meta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Meta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/Meta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Meta(ctx, req.(*MetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Init(ctx, req.(*ContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).Call(ctx, req.(*ContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contract_StaticCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractServer).StaticCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Contract/StaticCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractServer).StaticCall(ctx, req.(*ContractCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contract_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Contract",
	HandlerType: (*ContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Meta",
			Handler:    _Contract_Meta_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Contract_Init_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Contract_Call_Handler,
		},
		{
			MethodName: "StaticCall",
			Handler:    _Contract_StaticCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// Client API for API service

type APIClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasResponse, error)
	StaticCall(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	Emit(ctx context.Context, in *EmitRequest, opts ...grpc.CallOption) (*EmitResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/API/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasResponse, error) {
	out := new(HasResponse)
	err := grpc.Invoke(ctx, "/API/Has", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StaticCall(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := grpc.Invoke(ctx, "/API/StaticCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Emit(ctx context.Context, in *EmitRequest, opts ...grpc.CallOption) (*EmitResponse, error) {
	out := new(EmitResponse)
	err := grpc.Invoke(ctx, "/API/Emit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := grpc.Invoke(ctx, "/API/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/API/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := grpc.Invoke(ctx, "/API/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Has(context.Context, *HasRequest) (*HasResponse, error)
	StaticCall(context.Context, *CallRequest) (*CallResponse, error)
	Emit(context.Context, *EmitRequest) (*EmitResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Call(context.Context, *CallRequest) (*CallResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Has(ctx, req.(*HasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StaticCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StaticCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/StaticCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StaticCall(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Emit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Emit(ctx, req.(*EmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _API_Get_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _API_Has_Handler,
		},
		{
			MethodName: "StaticCall",
			Handler:    _API_StaticCall_Handler,
		},
		{
			MethodName: "Emit",
			Handler:    _API_Emit_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _API_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _API_Delete_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _API_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

func init() { proto.RegisterFile("types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 1102 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x72, 0xdb, 0xc4,
	0x17, 0xaf, 0x3f, 0x65, 0x1f, 0x49, 0xae, 0x67, 0x9b, 0xc9, 0xdf, 0xf5, 0x7f, 0x20, 0xae, 0x32,
	0x34, 0x6e, 0x3b, 0xdd, 0x80, 0xc3, 0x30, 0x43, 0xe1, 0x26, 0x5f, 0x24, 0x06, 0x4a, 0x32, 0x72,
	0xe8, 0xad, 0x67, 0x2d, 0x2d, 0xb6, 0xa6, 0xb2, 0x56, 0x68, 0xd7, 0x26, 0x7e, 0x06, 0x5e, 0x87,
	0x87, 0xe8, 0x0b, 0x70, 0x9b, 0x8b, 0x3e, 0x09, 0xb3, 0x1f, 0x8a, 0x65, 0x9a, 0x14, 0x86, 0xbb,
	0x3d, 0x7b, 0x7e, 0xfb, 0x3b, 0x5f, 0xbf, 0xb3, 0x60, 0x8b, 0x55, 0x4a, 0x39, 0x4e, 0x33, 0x26,
	0x58, 0xf7, 0xf1, 0x94, 0xb1, 0x69, 0x4c, 0xf7, 0x95, 0x35, 0x59, 0xfc, 0xb2, 0x4f, 0x92, 0x95,
	0x71, 0xbd, 0x9c, 0x46, 0x62, 0xb6, 0x98, 0xe0, 0x80, 0xcd, 0xf7, 0xa7, 0x6c, 0xca, 0xd6, 0x18,
	0x69, 0x29, 0x43, 0x9d, 0x34, 0xdc, 0x7b, 0x57, 0x06, 0xfb, 0x28, 0x66, 0xc1, 0xdb, 0x73, 0x4a,
	0x42, 0x9a, 0xa1, 0xa7, 0xd0, 0x08, 0x66, 0x24, 0x4a, 0xc6, 0x51, 0xd8, 0x29, 0xf5, 0x4a, 0xfd,
	0xe6, 0x91, 0xfd, 0xfe, 0x66, 0xc7, 0x3a, 0x96, 0x77, 0xc3, 0x13, 0xdf, 0x52, 0xce, 0x61, 0x88,
	0xb6, 0xa1, 0x3e, 0xa3, 0xd1, 0x74, 0x26, 0x3a, 0xe5, 0x5e, 0xa9, 0x5f, 0xf1, 0x8d, 0x85, 0x10,
	0x54, 0x45, 0x34, 0xa7, 0x9d, 0x8a, 0xba, 0x55, 0x67, 0xf4, 0x3f, 0xb0, 0x92, 0xc5, 0x7c, 0x2c,
	0xae, 0x79, 0xa7, 0xda, 0x2b, 0xf5, 0x6b, 0x7e, 0x3d, 0x59, 0xcc, 0xaf, 0xae, 0x39, 0x3a, 0x04,
	0x37, 0x26, 0x5c, 0x8c, 0x27, 0x32, 0x01, 0x19, 0xb1, 0xd6, 0x2b, 0xf5, 0xed, 0x41, 0x03, 0xab,
	0x8c, 0x86, 0x27, 0x47, 0x8f, 0xde, 0xdd, 0xec, 0x3c, 0x78, 0x7f, 0xb3, 0x63, 0xff, 0x48, 0xb8,
	0x30, 0x97, 0xbe, 0x1d, 0xdf, 0x1a, 0x21, 0xea, 0x43, 0x5b, 0x51, 0x04, 0x6c, 0x3e, 0x8f, 0xc4,
	0x78, 0x46, 0xf8, 0xac, 0x53, 0xef, 0x95, 0xfa, 0x8e, 0xdf, 0x92, 0xf7, 0xc7, 0xea, 0xfa, 0x9c,
	0xf0, 0x19, 0xfa, 0x3f, 0x34, 0x43, 0x22, 0x88, 0x86, 0x58, 0x0a, 0xd2, 0x90, 0x17, 0xca, 0xb9,
	0x07, 0x0f, 0x97, 0x24, 0x8e, 0x42, 0x22, 0x58, 0xc6, 0x35, 0xa4, 0xa1, 0x59, 0xd6, 0xd7, 0x0a,
	0xf8, 0x18, 0x1a, 0x24, 0x4d, 0x35, 0xa2, 0xa9, 0x10, 0x16, 0x49, 0x53, 0xe9, 0xf2, 0x86, 0x60,
	0x99, 0x14, 0x65, 0x17, 0x14, 0xa2, 0xa4, 0x10, 0xea, 0x8c, 0x9e, 0x43, 0x2d, 0x25, 0x99, 0xe0,
	0xaa, 0x61, 0xf6, 0xa0, 0x85, 0x2f, 0x49, 0x26, 0x46, 0x54, 0xe8, 0xc6, 0x1f, 0x55, 0x65, 0xa9,
	0xbe, 0x86, 0x78, 0x5f, 0x83, 0xbb, 0xe1, 0x45, 0x5b, 0x50, 0x13, 0x4c, 0x90, 0x58, 0x31, 0xd6,
	0x7c, 0x6d, 0xdc, 0x86, 0x29, 0xaf, 0xc3, 0x78, 0xaf, 0xa0, 0xf9, 0x26, 0x4f, 0x59, 0x76, 0x3e,
	0x5d, 0x4c, 0xc6, 0x6f, 0xe9, 0xca, 0xa4, 0x52, 0x4f, 0x17, 0x93, 0x1f, 0xe8, 0x4a, 0xf2, 0xa5,
	0xec, 0x37, 0x9a, 0x99, 0xe9, 0x69, 0xc3, 0xfb, 0x06, 0x1a, 0xa7, 0xcb, 0x28, 0xa4, 0x49, 0x40,
	0xef, 0x7f, 0x7a, 0xcf, 0xe4, 0xbd, 0x57, 0x60, 0x1d, 0x86, 0x61, 0x46, 0x39, 0x97, 0x4d, 0xda,
	0x14, 0xd1, 0x5a, 0x37, 0x5b, 0x50, 0x8b, 0x59, 0x40, 0x62, 0x93, 0xb3, 0x36, 0xbc, 0x2f, 0xc0,
	0xbe, 0xca, 0x48, 0xc2, 0x49, 0x20, 0x22, 0x96, 0xa0, 0x16, 0x94, 0xcd, 0x4b, 0xd7, 0x2f, 0x47,
	0xa1, 0xac, 0x53, 0x4e, 0x2a, 0xaf, 0x53, 0x9e, 0xbd, 0xaf, 0x00, 0x2e, 0xe3, 0xc5, 0x34, 0x4a,
	0x8e, 0x59, 0x48, 0x25, 0x22, 0x21, 0x73, 0x6a, 0xa2, 0xa9, 0xb3, 0x0c, 0x15, 0x25, 0xe9, 0x42,
	0xe4, 0xa1, 0x94, 0xe1, 0x2d, 0xc1, 0xf2, 0xe9, 0xaf, 0x0b, 0xca, 0x05, 0xfa, 0x1c, 0x9c, 0x80,
	0x25, 0x82, 0x26, 0x62, 0x2c, 0x97, 0x4b, 0x3d, 0x6e, 0x0d, 0x5c, 0x7c, 0x9a, 0x04, 0x2c, 0x8c,
	0x92, 0xe9, 0xd5, 0x2a, 0xa5, 0xbe, 0x6d, 0x20, 0xd2, 0x40, 0x9f, 0x41, 0x9d, 0x04, 0x01, 0x4d,
	0x35, 0xe7, 0x07, 0x58, 0xe3, 0x94, 0xd9, 0x4c, 0x58, 0xb8, 0x52, 0x4b, 0xe0, 0xf8, 0xea, 0xec,
	0x5d, 0x42, 0xc3, 0xa7, 0x3c, 0x65, 0x09, 0xa7, 0xff, 0x21, 0x70, 0xce, 0x58, 0x2e, 0x30, 0xbe,
	0x00, 0xeb, 0x35, 0xe5, 0x9c, 0x4c, 0x29, 0xea, 0x41, 0x9d, 0xd3, 0x24, 0xa4, 0x99, 0xa2, 0x92,
	0x1b, 0x64, 0x46, 0xe1, 0x9b, 0x7b, 0xef, 0x5b, 0x70, 0x8e, 0x59, 0x22, 0x32, 0x12, 0x88, 0xd7,
	0x54, 0x90, 0x3b, 0x1b, 0xd6, 0x01, 0x6b, 0x49, 0x33, 0x1e, 0xb1, 0x44, 0xc5, 0x69, 0xfa, 0xb9,
	0xe9, 0xbd, 0x01, 0x54, 0x78, 0x3d, 0x63, 0xe1, 0x31, 0x89, 0x63, 0xa9, 0x84, 0xb9, 0xb2, 0x0c,
	0x8b, 0xb1, 0x50, 0xbf, 0x30, 0x2e, 0x7b, 0xb0, 0x85, 0xf5, 0x67, 0x85, 0xf3, 0x8f, 0x08, 0x1f,
	0x26, 0x2b, 0x33, 0xc4, 0x13, 0xd8, 0xfe, 0x90, 0xf7, 0xfb, 0xd1, 0xc5, 0x4f, 0xf7, 0x72, 0xdf,
	0x25, 0x85, 0x26, 0x58, 0x92, 0x85, 0x5e, 0x0b, 0xcf, 0x05, 0x5b, 0x96, 0x67, 0x26, 0xec, 0xfd,
	0x59, 0x82, 0x47, 0x79, 0x00, 0x49, 0x9d, 0x4f, 0xde, 0x83, 0x9a, 0xfa, 0x73, 0x4c, 0xbb, 0x1c,
	0x5c, 0xf8, 0x02, 0x7d, 0xed, 0x42, 0x1e, 0x58, 0x73, 0xdd, 0x5e, 0x53, 0x48, 0x03, 0x9b, 0x76,
	0xfb, 0xb9, 0x03, 0x1d, 0x40, 0x3b, 0x30, 0xf4, 0x63, 0xa2, 0x3b, 0xae, 0x86, 0x5e, 0x9c, 0xc0,
	0xc3, 0x1c, 0x91, 0x6f, 0xc7, 0x27, 0x00, 0x24, 0x8d, 0xc6, 0x9c, 0x66, 0x4b, 0x9a, 0xa9, 0x1f,
	0xd1, 0xf5, 0x9b, 0x24, 0x8d, 0x46, 0xea, 0x42, 0xc6, 0xcd, 0x74, 0x9a, 0xb7, 0xdf, 0xa1, 0x49,
	0xdb, 0xcf, 0x1d, 0x5e, 0x0b, 0x9c, 0x61, 0x12, 0x89, 0x5c, 0x50, 0xde, 0xa7, 0x00, 0x67, 0x54,
	0xe4, 0xd5, 0xb5, 0xa1, 0xb2, 0x5e, 0x5b, 0x79, 0xf4, 0x76, 0xc1, 0x56, 0x7e, 0xa3, 0xbf, 0x2d,
	0xa8, 0x2d, 0x49, 0xbc, 0xa0, 0x06, 0xa2, 0x0d, 0x49, 0x72, 0x4e, 0xf8, 0x47, 0x49, 0x94, 0xff,
	0x2e, 0x92, 0x46, 0x4e, 0x72, 0x06, 0xf6, 0x66, 0xa3, 0xad, 0xbc, 0x2f, 0x7f, 0x57, 0x66, 0xee,
	0xb8, 0x67, 0x4f, 0x9f, 0x82, 0xa3, 0x89, 0x4c, 0xb8, 0x6d, 0xa8, 0xb3, 0x85, 0x90, 0x30, 0xf3,
	0x1d, 0x69, 0xcb, 0x7b, 0x02, 0xf6, 0xe9, 0x3c, 0xba, 0xad, 0x3d, 0xd7, 0x47, 0xa9, 0xa0, 0x8f,
	0x16, 0x38, 0x1a, 0x62, 0xba, 0xf5, 0x25, 0xc0, 0xe8, 0x23, 0xdd, 0x5a, 0x57, 0x56, 0x2e, 0xb6,
	0xc7, 0x05, 0x7b, 0xb4, 0xee, 0xa1, 0xf7, 0x04, 0xdc, 0x13, 0x1a, 0x53, 0x41, 0xef, 0x6f, 0x58,
	0x1b, 0x5a, 0x39, 0x44, 0x3f, 0x7a, 0xbe, 0x07, 0x4e, 0x71, 0xc7, 0x51, 0x03, 0xaa, 0x52, 0xed,
	0xed, 0x07, 0xc8, 0x85, 0xe6, 0xa5, 0x7f, 0x71, 0x75, 0x71, 0xf4, 0xf3, 0x77, 0x07, 0xed, 0xd2,
	0xe0, 0x8f, 0x12, 0x34, 0x72, 0xe1, 0xa2, 0x5d, 0xa8, 0xaa, 0x9d, 0x75, 0x70, 0x41, 0xdb, 0x5d,
	0x17, 0x6f, 0x2c, 0xf4, 0x0b, 0xa8, 0x4a, 0x49, 0xa0, 0x2d, 0x7c, 0x87, 0xe0, 0xbb, 0x2e, 0x2e,
	0xea, 0x05, 0xed, 0x41, 0x55, 0x6d, 0xf0, 0xdd, 0xe0, 0x26, 0xbe, 0x05, 0xbe, 0x04, 0x18, 0x09,
	0x22, 0xa2, 0xe0, 0x5f, 0xc1, 0x07, 0xbf, 0x97, 0xa1, 0x72, 0x78, 0x39, 0x44, 0x3d, 0xa8, 0x9c,
	0x51, 0x81, 0x6c, 0xbc, 0x56, 0x65, 0xd7, 0xc1, 0x45, 0x09, 0xf6, 0xa0, 0x72, 0x4e, 0x38, 0xb2,
	0xf1, 0x5a, 0x72, 0x5d, 0x07, 0x17, 0xf5, 0xf5, 0x6c, 0x23, 0xb4, 0x83, 0x37, 0xcb, 0xd9, 0xd0,
	0xc6, 0x2e, 0x54, 0xe5, 0x80, 0x91, 0x83, 0x0b, 0x52, 0xe8, 0xba, 0xb8, 0x38, 0x75, 0x19, 0x71,
	0xa4, 0x72, 0x1a, 0x15, 0x73, 0x2a, 0x8c, 0x14, 0x3d, 0x83, 0xba, 0x9e, 0x17, 0x6a, 0xe1, 0x8d,
	0xd9, 0x76, 0x1f, 0xe2, 0xcd, 0x41, 0xca, 0x88, 0xff, 0x98, 0xd6, 0xa4, 0xae, 0x7e, 0xbc, 0x83,
	0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x58, 0xab, 0xe2, 0xbb, 0x09, 0x00, 0x00,
}
