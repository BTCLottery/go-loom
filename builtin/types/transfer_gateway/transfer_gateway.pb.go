// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/loomnetwork/go-loom/builtin/types/transfer_gateway/transfer_gateway.proto

/*
Package transfer_gateway is a generated protocol buffer package.

It is generated from these files:
	github.com/loomnetwork/go-loom/builtin/types/transfer_gateway/transfer_gateway.proto

It has these top-level messages:
	TransferGatewayState
	TransferGatewayOracleState
	TransferGatewayWithdrawalReceipt
	TransferGatewayPendingWithdrawalSummary
	TransferGatewayLocalAccount
	TransferGatewayForeignAccount
	TransferGatewayTokenAmount
	TransferGatewayUnclaimedToken
	TransferGatewayTokenDeposited
	TransferGatewayTokenWithdrawn
	TransferGatewayMainnetEvent
	TransferGatewayPendingContractMapping
	TransferGatewayContractAddressMapping
	TransferGatewayUnverifiedContractCreator
	TransferGatewayVerifiedContractCreator
	TransferGatewayContractMappingConfirmed
	TransferGatewayTokenWithdrawalSigned
	TransferGatewayInitRequest
	TransferGatewayAddOracleRequest
	TransferGatewayRemoveOracleRequest
	TransferGatewayGetOraclesRequest
	TransferGatewayGetOraclesResponse
	TransferGatewayAddContractMappingRequest
	TransferGatewayUnverifiedContractCreatorsRequest
	TransferGatewayUnverifiedContractCreatorsResponse
	TransferGatewayVerifyContractCreatorsRequest
	TransferGatewayProcessEventBatchRequest
	TransferGatewayStateRequest
	TransferGatewayStateResponse
	TransferGatewayReclaimDepositorTokensRequest
	TransferGatewayReclaimContractTokensRequest
	TransferGatewayWithdrawTokenRequest
	TransferGatewayWithdrawETHRequest
	TransferGatewayWithdrawalReceiptRequest
	TransferGatewayWithdrawalReceiptResponse
	TransferGatewayConfirmWithdrawalReceiptRequest
	TransferGatewayPendingWithdrawalsRequest
	TransferGatewayPendingWithdrawalsResponse
*/
package transfer_gateway

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/loomnetwork/go-loom/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TransferGatewayTokenKind int32

const (
	TransferGatewayTokenKind_ETH      TransferGatewayTokenKind = 0
	TransferGatewayTokenKind_ERC20    TransferGatewayTokenKind = 1
	TransferGatewayTokenKind_ERC721   TransferGatewayTokenKind = 2
	TransferGatewayTokenKind_ERC721X  TransferGatewayTokenKind = 3
	TransferGatewayTokenKind_LOOMCOIN TransferGatewayTokenKind = 4
)

var TransferGatewayTokenKind_name = map[int32]string{
	0: "ETH",
	1: "ERC20",
	2: "ERC721",
	3: "ERC721X",
	4: "LOOMCOIN",
}
var TransferGatewayTokenKind_value = map[string]int32{
	"ETH":      0,
	"ERC20":    1,
	"ERC721":   2,
	"ERC721X":  3,
	"LOOMCOIN": 4,
}

func (x TransferGatewayTokenKind) String() string {
	return proto.EnumName(TransferGatewayTokenKind_name, int32(x))
}
func (TransferGatewayTokenKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{0}
}

type TransferGatewayState struct {
	Owner *types.Address `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	// Last Mainnet block processed by the Transfer Gateway contract
	LastMainnetBlockNum uint64 `protobuf:"varint,2,opt,name=last_mainnet_block_num,json=lastMainnetBlockNum,proto3" json:"last_mainnet_block_num,omitempty"`
	// ID that should be used for the next pending contract mapping
	NextContractMappingID uint64 `protobuf:"varint,3,opt,name=next_contract_mapping_id,json=nextContractMappingId,proto3" json:"next_contract_mapping_id,omitempty"`
	// Token owners that have initiated (but have not as yet completed) a withdrawal to Mainnet.
	TokenWithdrawers []*types.Address `protobuf:"bytes,4,rep,name=token_withdrawers,json=tokenWithdrawers" json:"token_withdrawers,omitempty"`
}

func (m *TransferGatewayState) Reset()         { *m = TransferGatewayState{} }
func (m *TransferGatewayState) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayState) ProtoMessage()    {}
func (*TransferGatewayState) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{0}
}

func (m *TransferGatewayState) GetOwner() *types.Address {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TransferGatewayState) GetLastMainnetBlockNum() uint64 {
	if m != nil {
		return m.LastMainnetBlockNum
	}
	return 0
}

func (m *TransferGatewayState) GetNextContractMappingID() uint64 {
	if m != nil {
		return m.NextContractMappingID
	}
	return 0
}

func (m *TransferGatewayState) GetTokenWithdrawers() []*types.Address {
	if m != nil {
		return m.TokenWithdrawers
	}
	return nil
}

type TransferGatewayOracleState struct {
	// DAppChain address of the Oracle
	Address *types.Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *TransferGatewayOracleState) Reset()         { *m = TransferGatewayOracleState{} }
func (m *TransferGatewayOracleState) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayOracleState) ProtoMessage()    {}
func (*TransferGatewayOracleState) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{1}
}

func (m *TransferGatewayOracleState) GetAddress() *types.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type TransferGatewayWithdrawalReceipt struct {
	// Mainnet address of token owner
	TokenOwner *types.Address `protobuf:"bytes,1,opt,name=token_owner,json=tokenOwner" json:"token_owner,omitempty"`
	// Mainnet address of token contract
	TokenContract *types.Address           `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract" json:"token_contract,omitempty"`
	TokenKind     TransferGatewayTokenKind `protobuf:"varint,3,opt,name=token_kind,json=tokenKind,proto3,enum=TransferGatewayTokenKind" json:"token_kind,omitempty"`
	// ERC721/X token ID
	TokenID *types.BigUInt `protobuf:"bytes,4,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	// ERC721X/ERC20/ETH amount
	TokenAmount     *types.BigUInt `protobuf:"bytes,5,opt,name=token_amount,json=tokenAmount" json:"token_amount,omitempty"`
	WithdrawalNonce uint64         `protobuf:"varint,6,opt,name=withdrawal_nonce,json=withdrawalNonce,proto3" json:"withdrawal_nonce,omitempty"`
	// Signature generated by the Oracle that confirmed the withdrawal
	OracleSignature []byte `protobuf:"bytes,7,opt,name=oracle_signature,json=oracleSignature,proto3" json:"oracle_signature,omitempty"`
}

func (m *TransferGatewayWithdrawalReceipt) Reset()         { *m = TransferGatewayWithdrawalReceipt{} }
func (m *TransferGatewayWithdrawalReceipt) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayWithdrawalReceipt) ProtoMessage()    {}
func (*TransferGatewayWithdrawalReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{2}
}

func (m *TransferGatewayWithdrawalReceipt) GetTokenOwner() *types.Address {
	if m != nil {
		return m.TokenOwner
	}
	return nil
}

func (m *TransferGatewayWithdrawalReceipt) GetTokenContract() *types.Address {
	if m != nil {
		return m.TokenContract
	}
	return nil
}

func (m *TransferGatewayWithdrawalReceipt) GetTokenKind() TransferGatewayTokenKind {
	if m != nil {
		return m.TokenKind
	}
	return TransferGatewayTokenKind_ETH
}

func (m *TransferGatewayWithdrawalReceipt) GetTokenID() *types.BigUInt {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *TransferGatewayWithdrawalReceipt) GetTokenAmount() *types.BigUInt {
	if m != nil {
		return m.TokenAmount
	}
	return nil
}

func (m *TransferGatewayWithdrawalReceipt) GetWithdrawalNonce() uint64 {
	if m != nil {
		return m.WithdrawalNonce
	}
	return 0
}

func (m *TransferGatewayWithdrawalReceipt) GetOracleSignature() []byte {
	if m != nil {
		return m.OracleSignature
	}
	return nil
}

type TransferGatewayPendingWithdrawalSummary struct {
	// DAppChain address of token owner
	TokenOwner *types.Address `protobuf:"bytes,1,opt,name=token_owner,json=tokenOwner" json:"token_owner,omitempty"`
	// Hash of the unsigned withdrawal receipt
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TransferGatewayPendingWithdrawalSummary) Reset() {
	*m = TransferGatewayPendingWithdrawalSummary{}
}
func (m *TransferGatewayPendingWithdrawalSummary) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayPendingWithdrawalSummary) ProtoMessage()    {}
func (*TransferGatewayPendingWithdrawalSummary) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{3}
}

func (m *TransferGatewayPendingWithdrawalSummary) GetTokenOwner() *types.Address {
	if m != nil {
		return m.TokenOwner
	}
	return nil
}

func (m *TransferGatewayPendingWithdrawalSummary) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type TransferGatewayLocalAccount struct {
	Owner             *types.Address                    `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	WithdrawalNonce   uint64                            `protobuf:"varint,2,opt,name=withdrawal_nonce,json=withdrawalNonce,proto3" json:"withdrawal_nonce,omitempty"`
	WithdrawalReceipt *TransferGatewayWithdrawalReceipt `protobuf:"bytes,3,opt,name=withdrawal_receipt,json=withdrawalReceipt" json:"withdrawal_receipt,omitempty"`
}

func (m *TransferGatewayLocalAccount) Reset()         { *m = TransferGatewayLocalAccount{} }
func (m *TransferGatewayLocalAccount) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayLocalAccount) ProtoMessage()    {}
func (*TransferGatewayLocalAccount) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{4}
}

func (m *TransferGatewayLocalAccount) GetOwner() *types.Address {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TransferGatewayLocalAccount) GetWithdrawalNonce() uint64 {
	if m != nil {
		return m.WithdrawalNonce
	}
	return 0
}

func (m *TransferGatewayLocalAccount) GetWithdrawalReceipt() *TransferGatewayWithdrawalReceipt {
	if m != nil {
		return m.WithdrawalReceipt
	}
	return nil
}

type TransferGatewayForeignAccount struct {
	// Foreign address of the foreign account
	Owner *types.Address `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	// Nonce that should be used for the next withdrawal to this foreign account
	WithdrawalNonce uint64 `protobuf:"varint,2,opt,name=withdrawal_nonce,json=withdrawalNonce,proto3" json:"withdrawal_nonce,omitempty"`
	// Local address of the account being withdrawn from (if any).
	// This will only be set when there's a withdrawal to the Ethereum Gateway in progress.
	CurrentWithdrawer *types.Address `protobuf:"bytes,3,opt,name=current_withdrawer,json=currentWithdrawer" json:"current_withdrawer,omitempty"`
}

func (m *TransferGatewayForeignAccount) Reset()         { *m = TransferGatewayForeignAccount{} }
func (m *TransferGatewayForeignAccount) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayForeignAccount) ProtoMessage()    {}
func (*TransferGatewayForeignAccount) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{5}
}

func (m *TransferGatewayForeignAccount) GetOwner() *types.Address {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TransferGatewayForeignAccount) GetWithdrawalNonce() uint64 {
	if m != nil {
		return m.WithdrawalNonce
	}
	return 0
}

func (m *TransferGatewayForeignAccount) GetCurrentWithdrawer() *types.Address {
	if m != nil {
		return m.CurrentWithdrawer
	}
	return nil
}

type TransferGatewayTokenAmount struct {
	TokenID     *types.BigUInt `protobuf:"bytes,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	TokenAmount *types.BigUInt `protobuf:"bytes,2,opt,name=token_amount,json=tokenAmount" json:"token_amount,omitempty"`
}

func (m *TransferGatewayTokenAmount) Reset()         { *m = TransferGatewayTokenAmount{} }
func (m *TransferGatewayTokenAmount) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayTokenAmount) ProtoMessage()    {}
func (*TransferGatewayTokenAmount) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{6}
}

func (m *TransferGatewayTokenAmount) GetTokenID() *types.BigUInt {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *TransferGatewayTokenAmount) GetTokenAmount() *types.BigUInt {
	if m != nil {
		return m.TokenAmount
	}
	return nil
}

// Stores all unclaimed tokens of a depositor for a single contract.
type TransferGatewayUnclaimedToken struct {
	// Foreign address of token contract
	TokenContract *types.Address           `protobuf:"bytes,1,opt,name=token_contract,json=tokenContract" json:"token_contract,omitempty"`
	TokenKind     TransferGatewayTokenKind `protobuf:"varint,2,opt,name=token_kind,json=tokenKind,proto3,enum=TransferGatewayTokenKind" json:"token_kind,omitempty"`
	// For ERC721 this is a list of token IDs (amount is omitted because it should always be 1).
	// For ERC721X this is a list of token IDs with the corresponding amount of each token.
	// For ERC20/ETH this list will contain a single value containing the total unclaimed ERC20/ETH amount.
	Amounts []*TransferGatewayTokenAmount `protobuf:"bytes,3,rep,name=amounts" json:"amounts,omitempty"`
}

func (m *TransferGatewayUnclaimedToken) Reset()         { *m = TransferGatewayUnclaimedToken{} }
func (m *TransferGatewayUnclaimedToken) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayUnclaimedToken) ProtoMessage()    {}
func (*TransferGatewayUnclaimedToken) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{7}
}

func (m *TransferGatewayUnclaimedToken) GetTokenContract() *types.Address {
	if m != nil {
		return m.TokenContract
	}
	return nil
}

func (m *TransferGatewayUnclaimedToken) GetTokenKind() TransferGatewayTokenKind {
	if m != nil {
		return m.TokenKind
	}
	return TransferGatewayTokenKind_ETH
}

func (m *TransferGatewayUnclaimedToken) GetAmounts() []*TransferGatewayTokenAmount {
	if m != nil {
		return m.Amounts
	}
	return nil
}

// Token Deposit (ETH/ERC20/ERC721/X) made into the Mainnet Gateway
type TransferGatewayTokenDeposited struct {
	// Mainnet address of token owner
	TokenOwner *types.Address `protobuf:"bytes,1,opt,name=token_owner,json=tokenOwner" json:"token_owner,omitempty"`
	// Mainnet address of token contract, blank if ETH was deposited
	TokenContract *types.Address           `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract" json:"token_contract,omitempty"`
	TokenKind     TransferGatewayTokenKind `protobuf:"varint,3,opt,name=token_kind,json=tokenKind,proto3,enum=TransferGatewayTokenKind" json:"token_kind,omitempty"`
	// ERC721/X token ID
	TokenID *types.BigUInt `protobuf:"bytes,4,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	// ERC721X/ERC20/ETH amount
	TokenAmount *types.BigUInt `protobuf:"bytes,5,opt,name=token_amount,json=tokenAmount" json:"token_amount,omitempty"`
}

func (m *TransferGatewayTokenDeposited) Reset()         { *m = TransferGatewayTokenDeposited{} }
func (m *TransferGatewayTokenDeposited) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayTokenDeposited) ProtoMessage()    {}
func (*TransferGatewayTokenDeposited) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{8}
}

func (m *TransferGatewayTokenDeposited) GetTokenOwner() *types.Address {
	if m != nil {
		return m.TokenOwner
	}
	return nil
}

func (m *TransferGatewayTokenDeposited) GetTokenContract() *types.Address {
	if m != nil {
		return m.TokenContract
	}
	return nil
}

func (m *TransferGatewayTokenDeposited) GetTokenKind() TransferGatewayTokenKind {
	if m != nil {
		return m.TokenKind
	}
	return TransferGatewayTokenKind_ETH
}

func (m *TransferGatewayTokenDeposited) GetTokenID() *types.BigUInt {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *TransferGatewayTokenDeposited) GetTokenAmount() *types.BigUInt {
	if m != nil {
		return m.TokenAmount
	}
	return nil
}

// Withdrawal from Mainnet Transfer Gateway
type TransferGatewayTokenWithdrawn struct {
	// Mainnet address of token owner
	TokenOwner *types.Address `protobuf:"bytes,1,opt,name=token_owner,json=tokenOwner" json:"token_owner,omitempty"`
	// Mainnet address of token contract, blank if ETH was withdrawn
	TokenContract *types.Address           `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract" json:"token_contract,omitempty"`
	TokenKind     TransferGatewayTokenKind `protobuf:"varint,3,opt,name=token_kind,json=tokenKind,proto3,enum=TransferGatewayTokenKind" json:"token_kind,omitempty"`
	// ERC721/X token ID
	TokenID *types.BigUInt `protobuf:"bytes,4,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	// ERC721X/ERC20/ETH amount
	TokenAmount *types.BigUInt `protobuf:"bytes,5,opt,name=token_amount,json=tokenAmount" json:"token_amount,omitempty"`
}

func (m *TransferGatewayTokenWithdrawn) Reset()         { *m = TransferGatewayTokenWithdrawn{} }
func (m *TransferGatewayTokenWithdrawn) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayTokenWithdrawn) ProtoMessage()    {}
func (*TransferGatewayTokenWithdrawn) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{9}
}

func (m *TransferGatewayTokenWithdrawn) GetTokenOwner() *types.Address {
	if m != nil {
		return m.TokenOwner
	}
	return nil
}

func (m *TransferGatewayTokenWithdrawn) GetTokenContract() *types.Address {
	if m != nil {
		return m.TokenContract
	}
	return nil
}

func (m *TransferGatewayTokenWithdrawn) GetTokenKind() TransferGatewayTokenKind {
	if m != nil {
		return m.TokenKind
	}
	return TransferGatewayTokenKind_ETH
}

func (m *TransferGatewayTokenWithdrawn) GetTokenID() *types.BigUInt {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *TransferGatewayTokenWithdrawn) GetTokenAmount() *types.BigUInt {
	if m != nil {
		return m.TokenAmount
	}
	return nil
}

type TransferGatewayMainnetEvent struct {
	EthBlock uint64 `protobuf:"varint,1,opt,name=eth_block,json=ethBlock,proto3" json:"eth_block,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*TransferGatewayMainnetEvent_Deposit
	//	*TransferGatewayMainnetEvent_Withdrawal
	Payload isTransferGatewayMainnetEvent_Payload `protobuf_oneof:"payload"`
}

func (m *TransferGatewayMainnetEvent) Reset()         { *m = TransferGatewayMainnetEvent{} }
func (m *TransferGatewayMainnetEvent) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayMainnetEvent) ProtoMessage()    {}
func (*TransferGatewayMainnetEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{10}
}

type isTransferGatewayMainnetEvent_Payload interface {
	isTransferGatewayMainnetEvent_Payload()
}

type TransferGatewayMainnetEvent_Deposit struct {
	Deposit *TransferGatewayTokenDeposited `protobuf:"bytes,2,opt,name=deposit,oneof"`
}
type TransferGatewayMainnetEvent_Withdrawal struct {
	Withdrawal *TransferGatewayTokenWithdrawn `protobuf:"bytes,3,opt,name=withdrawal,oneof"`
}

func (*TransferGatewayMainnetEvent_Deposit) isTransferGatewayMainnetEvent_Payload()    {}
func (*TransferGatewayMainnetEvent_Withdrawal) isTransferGatewayMainnetEvent_Payload() {}

func (m *TransferGatewayMainnetEvent) GetPayload() isTransferGatewayMainnetEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TransferGatewayMainnetEvent) GetEthBlock() uint64 {
	if m != nil {
		return m.EthBlock
	}
	return 0
}

func (m *TransferGatewayMainnetEvent) GetDeposit() *TransferGatewayTokenDeposited {
	if x, ok := m.GetPayload().(*TransferGatewayMainnetEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *TransferGatewayMainnetEvent) GetWithdrawal() *TransferGatewayTokenWithdrawn {
	if x, ok := m.GetPayload().(*TransferGatewayMainnetEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TransferGatewayMainnetEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TransferGatewayMainnetEvent_OneofMarshaler, _TransferGatewayMainnetEvent_OneofUnmarshaler, _TransferGatewayMainnetEvent_OneofSizer, []interface{}{
		(*TransferGatewayMainnetEvent_Deposit)(nil),
		(*TransferGatewayMainnetEvent_Withdrawal)(nil),
	}
}

func _TransferGatewayMainnetEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TransferGatewayMainnetEvent)
	// payload
	switch x := m.Payload.(type) {
	case *TransferGatewayMainnetEvent_Deposit:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deposit); err != nil {
			return err
		}
	case *TransferGatewayMainnetEvent_Withdrawal:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Withdrawal); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TransferGatewayMainnetEvent.Payload has unexpected type %T", x)
	}
	return nil
}

func _TransferGatewayMainnetEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TransferGatewayMainnetEvent)
	switch tag {
	case 2: // payload.deposit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferGatewayTokenDeposited)
		err := b.DecodeMessage(msg)
		m.Payload = &TransferGatewayMainnetEvent_Deposit{msg}
		return true, err
	case 3: // payload.withdrawal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferGatewayTokenWithdrawn)
		err := b.DecodeMessage(msg)
		m.Payload = &TransferGatewayMainnetEvent_Withdrawal{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TransferGatewayMainnetEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TransferGatewayMainnetEvent)
	// payload
	switch x := m.Payload.(type) {
	case *TransferGatewayMainnetEvent_Deposit:
		s := proto.Size(x.Deposit)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransferGatewayMainnetEvent_Withdrawal:
		s := proto.Size(x.Withdrawal)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TransferGatewayPendingContractMapping struct {
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address on foreign blockchain
	ForeignContract *types.Address `protobuf:"bytes,2,opt,name=foreign_contract,json=foreignContract" json:"foreign_contract,omitempty"`
	// Corresponding address on local blockchain
	LocalContract *types.Address `protobuf:"bytes,3,opt,name=local_contract,json=localContract" json:"local_contract,omitempty"`
	// Foreign address of the creator of the foreign contract
	ForeignContractCreator *types.Address `protobuf:"bytes,4,opt,name=foreign_contract_creator,json=foreignContractCreator" json:"foreign_contract_creator,omitempty"`
	// Hash of the transaction which created the foreign contract
	ForeignContractTxHash []byte `protobuf:"bytes,5,opt,name=foreign_contract_tx_hash,json=foreignContractTxHash,proto3" json:"foreign_contract_tx_hash,omitempty"`
}

func (m *TransferGatewayPendingContractMapping) Reset()         { *m = TransferGatewayPendingContractMapping{} }
func (m *TransferGatewayPendingContractMapping) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayPendingContractMapping) ProtoMessage()    {}
func (*TransferGatewayPendingContractMapping) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{11}
}

func (m *TransferGatewayPendingContractMapping) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TransferGatewayPendingContractMapping) GetForeignContract() *types.Address {
	if m != nil {
		return m.ForeignContract
	}
	return nil
}

func (m *TransferGatewayPendingContractMapping) GetLocalContract() *types.Address {
	if m != nil {
		return m.LocalContract
	}
	return nil
}

func (m *TransferGatewayPendingContractMapping) GetForeignContractCreator() *types.Address {
	if m != nil {
		return m.ForeignContractCreator
	}
	return nil
}

func (m *TransferGatewayPendingContractMapping) GetForeignContractTxHash() []byte {
	if m != nil {
		return m.ForeignContractTxHash
	}
	return nil
}

type TransferGatewayContractAddressMapping struct {
	// Address on a blockchain
	From *types.Address `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	// Corresponding address on another blockchain
	To *types.Address `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *TransferGatewayContractAddressMapping) Reset()         { *m = TransferGatewayContractAddressMapping{} }
func (m *TransferGatewayContractAddressMapping) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayContractAddressMapping) ProtoMessage()    {}
func (*TransferGatewayContractAddressMapping) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{12}
}

func (m *TransferGatewayContractAddressMapping) GetFrom() *types.Address {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransferGatewayContractAddressMapping) GetTo() *types.Address {
	if m != nil {
		return m.To
	}
	return nil
}

type TransferGatewayUnverifiedContractCreator struct {
	ContractMappingID uint64 `protobuf:"varint,1,opt,name=contract_mapping_id,json=contractMappingId,proto3" json:"contract_mapping_id,omitempty"`
	// Hash of tx that created a contract, an Oracle will use this to lookup the creator & contract
	ContractTxHash []byte `protobuf:"bytes,2,opt,name=contract_tx_hash,json=contractTxHash,proto3" json:"contract_tx_hash,omitempty"`
}

func (m *TransferGatewayUnverifiedContractCreator) Reset() {
	*m = TransferGatewayUnverifiedContractCreator{}
}
func (m *TransferGatewayUnverifiedContractCreator) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayUnverifiedContractCreator) ProtoMessage()    {}
func (*TransferGatewayUnverifiedContractCreator) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{13}
}

func (m *TransferGatewayUnverifiedContractCreator) GetContractMappingID() uint64 {
	if m != nil {
		return m.ContractMappingID
	}
	return 0
}

func (m *TransferGatewayUnverifiedContractCreator) GetContractTxHash() []byte {
	if m != nil {
		return m.ContractTxHash
	}
	return nil
}

type TransferGatewayVerifiedContractCreator struct {
	ContractMappingID uint64         `protobuf:"varint,1,opt,name=contract_mapping_id,json=contractMappingId,proto3" json:"contract_mapping_id,omitempty"`
	Creator           *types.Address `protobuf:"bytes,2,opt,name=creator" json:"creator,omitempty"`
	Contract          *types.Address `protobuf:"bytes,3,opt,name=contract" json:"contract,omitempty"`
}

func (m *TransferGatewayVerifiedContractCreator) Reset() {
	*m = TransferGatewayVerifiedContractCreator{}
}
func (m *TransferGatewayVerifiedContractCreator) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayVerifiedContractCreator) ProtoMessage()    {}
func (*TransferGatewayVerifiedContractCreator) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{14}
}

func (m *TransferGatewayVerifiedContractCreator) GetContractMappingID() uint64 {
	if m != nil {
		return m.ContractMappingID
	}
	return 0
}

func (m *TransferGatewayVerifiedContractCreator) GetCreator() *types.Address {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *TransferGatewayVerifiedContractCreator) GetContract() *types.Address {
	if m != nil {
		return m.Contract
	}
	return nil
}

type TransferGatewayContractMappingConfirmed struct {
	// Address of a contract on a foreign blockchain
	ForeignContract *types.Address `protobuf:"bytes,1,opt,name=foreign_contract,json=foreignContract" json:"foreign_contract,omitempty"`
	// Address of corresponding contract on the local blockchain
	LocalContract *types.Address `protobuf:"bytes,2,opt,name=local_contract,json=localContract" json:"local_contract,omitempty"`
}

func (m *TransferGatewayContractMappingConfirmed) Reset() {
	*m = TransferGatewayContractMappingConfirmed{}
}
func (m *TransferGatewayContractMappingConfirmed) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayContractMappingConfirmed) ProtoMessage()    {}
func (*TransferGatewayContractMappingConfirmed) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{15}
}

func (m *TransferGatewayContractMappingConfirmed) GetForeignContract() *types.Address {
	if m != nil {
		return m.ForeignContract
	}
	return nil
}

func (m *TransferGatewayContractMappingConfirmed) GetLocalContract() *types.Address {
	if m != nil {
		return m.LocalContract
	}
	return nil
}

// Emitted when a withdrawal to the Mainnet Gateway has been signed.
// This event contains all the required data to complete a toke withdrawal via the Mainnet Gateway.
type TransferGatewayTokenWithdrawalSigned struct {
	// Mainnet address of token owner
	TokenOwner *types.Address `protobuf:"bytes,1,opt,name=token_owner,json=tokenOwner" json:"token_owner,omitempty"`
	// Mainnet address of token contract, blank if ETH
	TokenContract *types.Address           `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract" json:"token_contract,omitempty"`
	TokenKind     TransferGatewayTokenKind `protobuf:"varint,3,opt,name=token_kind,json=tokenKind,proto3,enum=TransferGatewayTokenKind" json:"token_kind,omitempty"`
	// ERC721/X token ID
	TokenID *types.BigUInt `protobuf:"bytes,4,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	// ERC721X/ERC20/ETH amount
	TokenAmount *types.BigUInt `protobuf:"bytes,5,opt,name=token_amount,json=tokenAmount" json:"token_amount,omitempty"`
	// Oracle signature
	Sig []byte `protobuf:"bytes,6,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *TransferGatewayTokenWithdrawalSigned) Reset()         { *m = TransferGatewayTokenWithdrawalSigned{} }
func (m *TransferGatewayTokenWithdrawalSigned) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayTokenWithdrawalSigned) ProtoMessage()    {}
func (*TransferGatewayTokenWithdrawalSigned) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{16}
}

func (m *TransferGatewayTokenWithdrawalSigned) GetTokenOwner() *types.Address {
	if m != nil {
		return m.TokenOwner
	}
	return nil
}

func (m *TransferGatewayTokenWithdrawalSigned) GetTokenContract() *types.Address {
	if m != nil {
		return m.TokenContract
	}
	return nil
}

func (m *TransferGatewayTokenWithdrawalSigned) GetTokenKind() TransferGatewayTokenKind {
	if m != nil {
		return m.TokenKind
	}
	return TransferGatewayTokenKind_ETH
}

func (m *TransferGatewayTokenWithdrawalSigned) GetTokenID() *types.BigUInt {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *TransferGatewayTokenWithdrawalSigned) GetTokenAmount() *types.BigUInt {
	if m != nil {
		return m.TokenAmount
	}
	return nil
}

func (m *TransferGatewayTokenWithdrawalSigned) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type TransferGatewayInitRequest struct {
	// Only the owner will be allowed to add/remove oracles
	Owner *types.Address `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	// List of oracles that the Gateway should accept data from
	Oracles []*types.Address `protobuf:"bytes,2,rep,name=oracles" json:"oracles,omitempty"`
	// Initial value for TransferGatewayState.last_mainnet_block_num,
	// Oracles will start looking for relevant Mainnet events from this block onwards.
	// Should be set to the Mainnet block number that immediately preceeded the block containing
	// the tx that deployed the Mainnet Gateway contract.
	FirstMainnetBlockNum uint64 `protobuf:"varint,3,opt,name=first_mainnet_block_num,json=firstMainnetBlockNum,proto3" json:"first_mainnet_block_num,omitempty"`
}

func (m *TransferGatewayInitRequest) Reset()         { *m = TransferGatewayInitRequest{} }
func (m *TransferGatewayInitRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayInitRequest) ProtoMessage()    {}
func (*TransferGatewayInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{17}
}

func (m *TransferGatewayInitRequest) GetOwner() *types.Address {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *TransferGatewayInitRequest) GetOracles() []*types.Address {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *TransferGatewayInitRequest) GetFirstMainnetBlockNum() uint64 {
	if m != nil {
		return m.FirstMainnetBlockNum
	}
	return 0
}

type TransferGatewayAddOracleRequest struct {
	Oracle *types.Address `protobuf:"bytes,1,opt,name=oracle" json:"oracle,omitempty"`
}

func (m *TransferGatewayAddOracleRequest) Reset()         { *m = TransferGatewayAddOracleRequest{} }
func (m *TransferGatewayAddOracleRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayAddOracleRequest) ProtoMessage()    {}
func (*TransferGatewayAddOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{18}
}

func (m *TransferGatewayAddOracleRequest) GetOracle() *types.Address {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type TransferGatewayRemoveOracleRequest struct {
	Oracle *types.Address `protobuf:"bytes,1,opt,name=oracle" json:"oracle,omitempty"`
}

func (m *TransferGatewayRemoveOracleRequest) Reset()         { *m = TransferGatewayRemoveOracleRequest{} }
func (m *TransferGatewayRemoveOracleRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayRemoveOracleRequest) ProtoMessage()    {}
func (*TransferGatewayRemoveOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{19}
}

func (m *TransferGatewayRemoveOracleRequest) GetOracle() *types.Address {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type TransferGatewayGetOraclesRequest struct {
}

func (m *TransferGatewayGetOraclesRequest) Reset()         { *m = TransferGatewayGetOraclesRequest{} }
func (m *TransferGatewayGetOraclesRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayGetOraclesRequest) ProtoMessage()    {}
func (*TransferGatewayGetOraclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{20}
}

type TransferGatewayGetOraclesResponse struct {
	Oracles []*TransferGatewayOracleState `protobuf:"bytes,1,rep,name=oracles" json:"oracles,omitempty"`
}

func (m *TransferGatewayGetOraclesResponse) Reset()         { *m = TransferGatewayGetOraclesResponse{} }
func (m *TransferGatewayGetOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayGetOraclesResponse) ProtoMessage()    {}
func (*TransferGatewayGetOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{21}
}

func (m *TransferGatewayGetOraclesResponse) GetOracles() []*TransferGatewayOracleState {
	if m != nil {
		return m.Oracles
	}
	return nil
}

type TransferGatewayAddContractMappingRequest struct {
	// Address on foreign blockchain
	ForeignContract *types.Address `protobuf:"bytes,1,opt,name=foreign_contract,json=foreignContract" json:"foreign_contract,omitempty"`
	// Corresponding address on local blockchain
	LocalContract *types.Address `protobuf:"bytes,2,opt,name=local_contract,json=localContract" json:"local_contract,omitempty"`
	// Signature of the creator of the foreign contract
	ForeignContractCreatorSig []byte `protobuf:"bytes,3,opt,name=foreign_contract_creator_sig,json=foreignContractCreatorSig,proto3" json:"foreign_contract_creator_sig,omitempty"`
	// Hash of the transaction which created the foreign contract
	ForeignContractTxHash []byte `protobuf:"bytes,4,opt,name=foreign_contract_tx_hash,json=foreignContractTxHash,proto3" json:"foreign_contract_tx_hash,omitempty"`
}

func (m *TransferGatewayAddContractMappingRequest) Reset() {
	*m = TransferGatewayAddContractMappingRequest{}
}
func (m *TransferGatewayAddContractMappingRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayAddContractMappingRequest) ProtoMessage()    {}
func (*TransferGatewayAddContractMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{22}
}

func (m *TransferGatewayAddContractMappingRequest) GetForeignContract() *types.Address {
	if m != nil {
		return m.ForeignContract
	}
	return nil
}

func (m *TransferGatewayAddContractMappingRequest) GetLocalContract() *types.Address {
	if m != nil {
		return m.LocalContract
	}
	return nil
}

func (m *TransferGatewayAddContractMappingRequest) GetForeignContractCreatorSig() []byte {
	if m != nil {
		return m.ForeignContractCreatorSig
	}
	return nil
}

func (m *TransferGatewayAddContractMappingRequest) GetForeignContractTxHash() []byte {
	if m != nil {
		return m.ForeignContractTxHash
	}
	return nil
}

type TransferGatewayUnverifiedContractCreatorsRequest struct {
}

func (m *TransferGatewayUnverifiedContractCreatorsRequest) Reset() {
	*m = TransferGatewayUnverifiedContractCreatorsRequest{}
}
func (m *TransferGatewayUnverifiedContractCreatorsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*TransferGatewayUnverifiedContractCreatorsRequest) ProtoMessage() {}
func (*TransferGatewayUnverifiedContractCreatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{23}
}

type TransferGatewayUnverifiedContractCreatorsResponse struct {
	Creators []*TransferGatewayUnverifiedContractCreator `protobuf:"bytes,1,rep,name=creators" json:"creators,omitempty"`
}

func (m *TransferGatewayUnverifiedContractCreatorsResponse) Reset() {
	*m = TransferGatewayUnverifiedContractCreatorsResponse{}
}
func (m *TransferGatewayUnverifiedContractCreatorsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*TransferGatewayUnverifiedContractCreatorsResponse) ProtoMessage() {}
func (*TransferGatewayUnverifiedContractCreatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{24}
}

func (m *TransferGatewayUnverifiedContractCreatorsResponse) GetCreators() []*TransferGatewayUnverifiedContractCreator {
	if m != nil {
		return m.Creators
	}
	return nil
}

type TransferGatewayVerifyContractCreatorsRequest struct {
	Creators []*TransferGatewayVerifiedContractCreator `protobuf:"bytes,1,rep,name=creators" json:"creators,omitempty"`
}

func (m *TransferGatewayVerifyContractCreatorsRequest) Reset() {
	*m = TransferGatewayVerifyContractCreatorsRequest{}
}
func (m *TransferGatewayVerifyContractCreatorsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*TransferGatewayVerifyContractCreatorsRequest) ProtoMessage() {}
func (*TransferGatewayVerifyContractCreatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{25}
}

func (m *TransferGatewayVerifyContractCreatorsRequest) GetCreators() []*TransferGatewayVerifiedContractCreator {
	if m != nil {
		return m.Creators
	}
	return nil
}

// Batch of events from the Gateway on Ethereum mainnet
type TransferGatewayProcessEventBatchRequest struct {
	Events []*TransferGatewayMainnetEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *TransferGatewayProcessEventBatchRequest) Reset() {
	*m = TransferGatewayProcessEventBatchRequest{}
}
func (m *TransferGatewayProcessEventBatchRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayProcessEventBatchRequest) ProtoMessage()    {}
func (*TransferGatewayProcessEventBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{26}
}

func (m *TransferGatewayProcessEventBatchRequest) GetEvents() []*TransferGatewayMainnetEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type TransferGatewayStateRequest struct {
}

func (m *TransferGatewayStateRequest) Reset()         { *m = TransferGatewayStateRequest{} }
func (m *TransferGatewayStateRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayStateRequest) ProtoMessage()    {}
func (*TransferGatewayStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{27}
}

type TransferGatewayStateResponse struct {
	State *TransferGatewayState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *TransferGatewayStateResponse) Reset()         { *m = TransferGatewayStateResponse{} }
func (m *TransferGatewayStateResponse) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayStateResponse) ProtoMessage()    {}
func (*TransferGatewayStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{28}
}

func (m *TransferGatewayStateResponse) GetState() *TransferGatewayState {
	if m != nil {
		return m.State
	}
	return nil
}

// Transfer unclaimed tokens to the sender, or to the specified depositors
type TransferGatewayReclaimDepositorTokensRequest struct {
	// Foreign address of depositors
	Depositors []*types.Address `protobuf:"bytes,1,rep,name=depositors" json:"depositors,omitempty"`
}

func (m *TransferGatewayReclaimDepositorTokensRequest) Reset() {
	*m = TransferGatewayReclaimDepositorTokensRequest{}
}
func (m *TransferGatewayReclaimDepositorTokensRequest) String() string {
	return proto.CompactTextString(m)
}
func (*TransferGatewayReclaimDepositorTokensRequest) ProtoMessage() {}
func (*TransferGatewayReclaimDepositorTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{29}
}

func (m *TransferGatewayReclaimDepositorTokensRequest) GetDepositors() []*types.Address {
	if m != nil {
		return m.Depositors
	}
	return nil
}

// Transfer any unclaimed tokens originating from a specific contract to their depositors
type TransferGatewayReclaimContractTokensRequest struct {
	// Foreign address of token contract
	TokenContract *types.Address `protobuf:"bytes,1,opt,name=token_contract,json=tokenContract" json:"token_contract,omitempty"`
}

func (m *TransferGatewayReclaimContractTokensRequest) Reset() {
	*m = TransferGatewayReclaimContractTokensRequest{}
}
func (m *TransferGatewayReclaimContractTokensRequest) String() string {
	return proto.CompactTextString(m)
}
func (*TransferGatewayReclaimContractTokensRequest) ProtoMessage() {}
func (*TransferGatewayReclaimContractTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{30}
}

func (m *TransferGatewayReclaimContractTokensRequest) GetTokenContract() *types.Address {
	if m != nil {
		return m.TokenContract
	}
	return nil
}

type TransferGatewayWithdrawTokenRequest struct {
	// ERC721/X/ERC20 contract DAppChain address
	TokenContract *types.Address           `protobuf:"bytes,1,opt,name=token_contract,json=tokenContract" json:"token_contract,omitempty"`
	TokenKind     TransferGatewayTokenKind `protobuf:"varint,2,opt,name=token_kind,json=tokenKind,proto3,enum=TransferGatewayTokenKind" json:"token_kind,omitempty"`
	// ERC721/X token ID
	TokenID *types.BigUInt `protobuf:"bytes,3,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	// ERC721X/ERC20 amount
	TokenAmount *types.BigUInt `protobuf:"bytes,4,opt,name=token_amount,json=tokenAmount" json:"token_amount,omitempty"`
	// Ethereum address of the account that should receive the token.
	// If this field is omitted the Gateway will attempt to obtain the recipient address from a
	// previously created mapping between the sender's DAppChain address and their Ethereum address,
	// if no such mapping exists the request will error out.
	Recipient *types.Address `protobuf:"bytes,5,opt,name=recipient" json:"recipient,omitempty"`
}

func (m *TransferGatewayWithdrawTokenRequest) Reset()         { *m = TransferGatewayWithdrawTokenRequest{} }
func (m *TransferGatewayWithdrawTokenRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayWithdrawTokenRequest) ProtoMessage()    {}
func (*TransferGatewayWithdrawTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{31}
}

func (m *TransferGatewayWithdrawTokenRequest) GetTokenContract() *types.Address {
	if m != nil {
		return m.TokenContract
	}
	return nil
}

func (m *TransferGatewayWithdrawTokenRequest) GetTokenKind() TransferGatewayTokenKind {
	if m != nil {
		return m.TokenKind
	}
	return TransferGatewayTokenKind_ETH
}

func (m *TransferGatewayWithdrawTokenRequest) GetTokenID() *types.BigUInt {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *TransferGatewayWithdrawTokenRequest) GetTokenAmount() *types.BigUInt {
	if m != nil {
		return m.TokenAmount
	}
	return nil
}

func (m *TransferGatewayWithdrawTokenRequest) GetRecipient() *types.Address {
	if m != nil {
		return m.Recipient
	}
	return nil
}

type TransferGatewayWithdrawETHRequest struct {
	// Amount of ETH to withdraw
	Amount *types.BigUInt `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	// Address of Mainnet Gateway contract
	MainnetGateway *types.Address `protobuf:"bytes,2,opt,name=mainnet_gateway,json=mainnetGateway" json:"mainnet_gateway,omitempty"`
	// Ethereum address of the account that should receive the ETH.
	// If this field is omitted the Gateway will attempt to obtain the recipient address from a
	// previously created mapping between the sender's DAppChain address and their Ethereum address,
	// if no such mapping exists the request will error out.
	Recipient *types.Address `protobuf:"bytes,3,opt,name=recipient" json:"recipient,omitempty"`
}

func (m *TransferGatewayWithdrawETHRequest) Reset()         { *m = TransferGatewayWithdrawETHRequest{} }
func (m *TransferGatewayWithdrawETHRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayWithdrawETHRequest) ProtoMessage()    {}
func (*TransferGatewayWithdrawETHRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{32}
}

func (m *TransferGatewayWithdrawETHRequest) GetAmount() *types.BigUInt {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransferGatewayWithdrawETHRequest) GetMainnetGateway() *types.Address {
	if m != nil {
		return m.MainnetGateway
	}
	return nil
}

func (m *TransferGatewayWithdrawETHRequest) GetRecipient() *types.Address {
	if m != nil {
		return m.Recipient
	}
	return nil
}

type TransferGatewayWithdrawalReceiptRequest struct {
	Owner *types.Address `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
}

func (m *TransferGatewayWithdrawalReceiptRequest) Reset() {
	*m = TransferGatewayWithdrawalReceiptRequest{}
}
func (m *TransferGatewayWithdrawalReceiptRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayWithdrawalReceiptRequest) ProtoMessage()    {}
func (*TransferGatewayWithdrawalReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{33}
}

func (m *TransferGatewayWithdrawalReceiptRequest) GetOwner() *types.Address {
	if m != nil {
		return m.Owner
	}
	return nil
}

type TransferGatewayWithdrawalReceiptResponse struct {
	Receipt *TransferGatewayWithdrawalReceipt `protobuf:"bytes,1,opt,name=receipt" json:"receipt,omitempty"`
}

func (m *TransferGatewayWithdrawalReceiptResponse) Reset() {
	*m = TransferGatewayWithdrawalReceiptResponse{}
}
func (m *TransferGatewayWithdrawalReceiptResponse) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayWithdrawalReceiptResponse) ProtoMessage()    {}
func (*TransferGatewayWithdrawalReceiptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{34}
}

func (m *TransferGatewayWithdrawalReceiptResponse) GetReceipt() *TransferGatewayWithdrawalReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

type TransferGatewayConfirmWithdrawalReceiptRequest struct {
	// DAppChain address of the entity attempting to make the withdrawal
	TokenOwner *types.Address `protobuf:"bytes,1,opt,name=token_owner,json=tokenOwner" json:"token_owner,omitempty"`
	// 66-byte hash of the withdrawal hash
	OracleSignature []byte `protobuf:"bytes,2,opt,name=oracle_signature,json=oracleSignature,proto3" json:"oracle_signature,omitempty"`
	// 32-byte hash of the withdrawal details
	WithdrawalHash []byte `protobuf:"bytes,3,opt,name=withdrawal_hash,json=withdrawalHash,proto3" json:"withdrawal_hash,omitempty"`
}

func (m *TransferGatewayConfirmWithdrawalReceiptRequest) Reset() {
	*m = TransferGatewayConfirmWithdrawalReceiptRequest{}
}
func (m *TransferGatewayConfirmWithdrawalReceiptRequest) String() string {
	return proto.CompactTextString(m)
}
func (*TransferGatewayConfirmWithdrawalReceiptRequest) ProtoMessage() {}
func (*TransferGatewayConfirmWithdrawalReceiptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{35}
}

func (m *TransferGatewayConfirmWithdrawalReceiptRequest) GetTokenOwner() *types.Address {
	if m != nil {
		return m.TokenOwner
	}
	return nil
}

func (m *TransferGatewayConfirmWithdrawalReceiptRequest) GetOracleSignature() []byte {
	if m != nil {
		return m.OracleSignature
	}
	return nil
}

func (m *TransferGatewayConfirmWithdrawalReceiptRequest) GetWithdrawalHash() []byte {
	if m != nil {
		return m.WithdrawalHash
	}
	return nil
}

type TransferGatewayPendingWithdrawalsRequest struct {
	// Address of Mainnet Gateway contract
	MainnetGateway *types.Address `protobuf:"bytes,1,opt,name=mainnet_gateway,json=mainnetGateway" json:"mainnet_gateway,omitempty"`
}

func (m *TransferGatewayPendingWithdrawalsRequest) Reset() {
	*m = TransferGatewayPendingWithdrawalsRequest{}
}
func (m *TransferGatewayPendingWithdrawalsRequest) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayPendingWithdrawalsRequest) ProtoMessage()    {}
func (*TransferGatewayPendingWithdrawalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{36}
}

func (m *TransferGatewayPendingWithdrawalsRequest) GetMainnetGateway() *types.Address {
	if m != nil {
		return m.MainnetGateway
	}
	return nil
}

type TransferGatewayPendingWithdrawalsResponse struct {
	Withdrawals []*TransferGatewayPendingWithdrawalSummary `protobuf:"bytes,1,rep,name=withdrawals" json:"withdrawals,omitempty"`
}

func (m *TransferGatewayPendingWithdrawalsResponse) Reset() {
	*m = TransferGatewayPendingWithdrawalsResponse{}
}
func (m *TransferGatewayPendingWithdrawalsResponse) String() string { return proto.CompactTextString(m) }
func (*TransferGatewayPendingWithdrawalsResponse) ProtoMessage()    {}
func (*TransferGatewayPendingWithdrawalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTransferGateway, []int{37}
}

func (m *TransferGatewayPendingWithdrawalsResponse) GetWithdrawals() []*TransferGatewayPendingWithdrawalSummary {
	if m != nil {
		return m.Withdrawals
	}
	return nil
}

func init() {
	proto.RegisterType((*TransferGatewayState)(nil), "TransferGatewayState")
	proto.RegisterType((*TransferGatewayOracleState)(nil), "TransferGatewayOracleState")
	proto.RegisterType((*TransferGatewayWithdrawalReceipt)(nil), "TransferGatewayWithdrawalReceipt")
	proto.RegisterType((*TransferGatewayPendingWithdrawalSummary)(nil), "TransferGatewayPendingWithdrawalSummary")
	proto.RegisterType((*TransferGatewayLocalAccount)(nil), "TransferGatewayLocalAccount")
	proto.RegisterType((*TransferGatewayForeignAccount)(nil), "TransferGatewayForeignAccount")
	proto.RegisterType((*TransferGatewayTokenAmount)(nil), "TransferGatewayTokenAmount")
	proto.RegisterType((*TransferGatewayUnclaimedToken)(nil), "TransferGatewayUnclaimedToken")
	proto.RegisterType((*TransferGatewayTokenDeposited)(nil), "TransferGatewayTokenDeposited")
	proto.RegisterType((*TransferGatewayTokenWithdrawn)(nil), "TransferGatewayTokenWithdrawn")
	proto.RegisterType((*TransferGatewayMainnetEvent)(nil), "TransferGatewayMainnetEvent")
	proto.RegisterType((*TransferGatewayPendingContractMapping)(nil), "TransferGatewayPendingContractMapping")
	proto.RegisterType((*TransferGatewayContractAddressMapping)(nil), "TransferGatewayContractAddressMapping")
	proto.RegisterType((*TransferGatewayUnverifiedContractCreator)(nil), "TransferGatewayUnverifiedContractCreator")
	proto.RegisterType((*TransferGatewayVerifiedContractCreator)(nil), "TransferGatewayVerifiedContractCreator")
	proto.RegisterType((*TransferGatewayContractMappingConfirmed)(nil), "TransferGatewayContractMappingConfirmed")
	proto.RegisterType((*TransferGatewayTokenWithdrawalSigned)(nil), "TransferGatewayTokenWithdrawalSigned")
	proto.RegisterType((*TransferGatewayInitRequest)(nil), "TransferGatewayInitRequest")
	proto.RegisterType((*TransferGatewayAddOracleRequest)(nil), "TransferGatewayAddOracleRequest")
	proto.RegisterType((*TransferGatewayRemoveOracleRequest)(nil), "TransferGatewayRemoveOracleRequest")
	proto.RegisterType((*TransferGatewayGetOraclesRequest)(nil), "TransferGatewayGetOraclesRequest")
	proto.RegisterType((*TransferGatewayGetOraclesResponse)(nil), "TransferGatewayGetOraclesResponse")
	proto.RegisterType((*TransferGatewayAddContractMappingRequest)(nil), "TransferGatewayAddContractMappingRequest")
	proto.RegisterType((*TransferGatewayUnverifiedContractCreatorsRequest)(nil), "TransferGatewayUnverifiedContractCreatorsRequest")
	proto.RegisterType((*TransferGatewayUnverifiedContractCreatorsResponse)(nil), "TransferGatewayUnverifiedContractCreatorsResponse")
	proto.RegisterType((*TransferGatewayVerifyContractCreatorsRequest)(nil), "TransferGatewayVerifyContractCreatorsRequest")
	proto.RegisterType((*TransferGatewayProcessEventBatchRequest)(nil), "TransferGatewayProcessEventBatchRequest")
	proto.RegisterType((*TransferGatewayStateRequest)(nil), "TransferGatewayStateRequest")
	proto.RegisterType((*TransferGatewayStateResponse)(nil), "TransferGatewayStateResponse")
	proto.RegisterType((*TransferGatewayReclaimDepositorTokensRequest)(nil), "TransferGatewayReclaimDepositorTokensRequest")
	proto.RegisterType((*TransferGatewayReclaimContractTokensRequest)(nil), "TransferGatewayReclaimContractTokensRequest")
	proto.RegisterType((*TransferGatewayWithdrawTokenRequest)(nil), "TransferGatewayWithdrawTokenRequest")
	proto.RegisterType((*TransferGatewayWithdrawETHRequest)(nil), "TransferGatewayWithdrawETHRequest")
	proto.RegisterType((*TransferGatewayWithdrawalReceiptRequest)(nil), "TransferGatewayWithdrawalReceiptRequest")
	proto.RegisterType((*TransferGatewayWithdrawalReceiptResponse)(nil), "TransferGatewayWithdrawalReceiptResponse")
	proto.RegisterType((*TransferGatewayConfirmWithdrawalReceiptRequest)(nil), "TransferGatewayConfirmWithdrawalReceiptRequest")
	proto.RegisterType((*TransferGatewayPendingWithdrawalsRequest)(nil), "TransferGatewayPendingWithdrawalsRequest")
	proto.RegisterType((*TransferGatewayPendingWithdrawalsResponse)(nil), "TransferGatewayPendingWithdrawalsResponse")
	proto.RegisterEnum("TransferGatewayTokenKind", TransferGatewayTokenKind_name, TransferGatewayTokenKind_value)
}

func init() {
	proto.RegisterFile("github.com/loomnetwork/go-loom/builtin/types/transfer_gateway/transfer_gateway.proto", fileDescriptorTransferGateway)
}

var fileDescriptorTransferGateway = []byte{
	// 1561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcf, 0x73, 0xdb, 0xc4,
	0x17, 0xaf, 0x64, 0x27, 0x4e, 0x5e, 0xd2, 0xc4, 0xd9, 0x36, 0xfd, 0xba, 0x6d, 0xda, 0xa4, 0xfb,
	0x2d, 0x6d, 0x42, 0xa9, 0x9d, 0xa6, 0x74, 0xca, 0xc0, 0x81, 0xc6, 0x4e, 0xda, 0x98, 0xb6, 0x49,
	0x47, 0x49, 0xa1, 0xc3, 0x0c, 0x78, 0x14, 0x69, 0x63, 0x6b, 0x62, 0x4b, 0x46, 0x5a, 0xd7, 0x09,
	0xfc, 0x07, 0x5c, 0xb8, 0x30, 0xd3, 0x03, 0x17, 0x06, 0xce, 0x0c, 0x67, 0xb8, 0x31, 0xfc, 0x1f,
	0x39, 0xe4, 0xce, 0x95, 0x33, 0xa3, 0xfd, 0x61, 0x2b, 0x5a, 0xd9, 0xb1, 0xcb, 0x94, 0x4b, 0x2f,
	0x1e, 0x79, 0xdf, 0xef, 0xcf, 0xbe, 0x7d, 0xef, 0xed, 0xc2, 0x4e, 0xd5, 0xa1, 0xb5, 0xd6, 0x6e,
	0xde, 0xf2, 0x1a, 0x85, 0xba, 0xe7, 0x35, 0x5c, 0x42, 0xdb, 0x9e, 0xbf, 0x5f, 0xa8, 0x7a, 0xb7,
	0xc3, 0xbf, 0x85, 0xdd, 0x96, 0x53, 0xa7, 0x8e, 0x5b, 0xa0, 0x87, 0x4d, 0x12, 0x14, 0xa8, 0x6f,
	0xba, 0xc1, 0x1e, 0xf1, 0x2b, 0x55, 0x93, 0x92, 0xb6, 0x79, 0xa8, 0x2c, 0xe4, 0x9b, 0xbe, 0x47,
	0xbd, 0x4b, 0xb7, 0x23, 0x5a, 0xab, 0x5e, 0xd5, 0x2b, 0xb0, 0xe5, 0xdd, 0xd6, 0x1e, 0xfb, 0xc7,
	0xfe, 0xb0, 0x2f, 0xc1, 0xbe, 0x7c, 0x8a, 0x13, 0xc2, 0x78, 0xf8, 0xcb, 0x25, 0xf0, 0xdf, 0x1a,
	0x9c, 0xdf, 0x11, 0xb6, 0x1f, 0x71, 0xd3, 0xdb, 0xd4, 0xa4, 0x04, 0x5d, 0x85, 0x11, 0xaf, 0xed,
	0x12, 0x3f, 0xa7, 0x2d, 0x68, 0x8b, 0x13, 0x2b, 0x63, 0xf9, 0x55, 0xdb, 0xf6, 0x49, 0x10, 0x18,
	0x7c, 0x19, 0xdd, 0x85, 0x0b, 0x75, 0x33, 0xa0, 0x95, 0x86, 0xe9, 0xb8, 0x2e, 0xa1, 0x95, 0xdd,
	0xba, 0x67, 0xed, 0x57, 0xdc, 0x56, 0x23, 0xa7, 0x2f, 0x68, 0x8b, 0x69, 0xe3, 0x5c, 0x48, 0x7d,
	0xca, 0x89, 0xc5, 0x90, 0xb6, 0xd9, 0x6a, 0x20, 0x03, 0x72, 0x2e, 0x39, 0xa0, 0x15, 0xcb, 0x73,
	0xa9, 0x6f, 0x5a, 0xa1, 0x74, 0xb3, 0xe9, 0xb8, 0xd5, 0x8a, 0x63, 0xe7, 0x52, 0xa1, 0x58, 0xf1,
	0xe2, 0xf1, 0xd1, 0xfc, 0xec, 0x26, 0x39, 0xa0, 0x25, 0xc1, 0xf2, 0x94, 0x73, 0x94, 0xd7, 0x8c,
	0x59, 0x37, 0x61, 0xd9, 0x46, 0xf7, 0x60, 0x86, 0x7a, 0xfb, 0xc4, 0xad, 0xb4, 0x1d, 0x5a, 0xb3,
	0x7d, 0xb3, 0x4d, 0xfc, 0x20, 0x97, 0x5e, 0x48, 0x9d, 0x70, 0x3a, 0xcb, 0x58, 0x3e, 0xeb, 0x72,
	0xe0, 0x07, 0x70, 0x29, 0x16, 0xf7, 0x96, 0x6f, 0x5a, 0x75, 0xc2, 0xa3, 0xc7, 0x90, 0x31, 0xb9,
	0xa8, 0x12, 0xbf, 0x24, 0xe0, 0xbf, 0x74, 0x58, 0x88, 0xa9, 0x90, 0x06, 0xcc, 0xba, 0x41, 0x2c,
	0xe2, 0x34, 0x29, 0x5a, 0x82, 0x09, 0xee, 0x5d, 0x32, 0x98, 0xc0, 0x88, 0x5b, 0x0c, 0xd1, 0x02,
	0x4c, 0x71, 0x56, 0x89, 0x0e, 0x43, 0x32, 0xca, 0x7d, 0x96, 0xd1, 0x25, 0x04, 0xe8, 0x03, 0xe0,
	0xe2, 0x95, 0x7d, 0xc7, 0xe5, 0xf8, 0x4d, 0xad, 0x5c, 0xcc, 0xc7, 0x5c, 0xda, 0x09, 0x39, 0x1e,
	0x3b, 0xae, 0x6d, 0x8c, 0x53, 0xf9, 0x89, 0x96, 0x61, 0x8c, 0x4b, 0x3a, 0x76, 0x2e, 0x2d, 0x8c,
	0x14, 0x9d, 0xea, 0xf3, 0xb2, 0x4b, 0x8b, 0x13, 0xc7, 0x47, 0xf3, 0x19, 0x26, 0x55, 0x5e, 0x33,
	0x32, 0x8c, 0xad, 0x6c, 0xa3, 0x5b, 0x30, 0xc9, 0x25, 0xcc, 0x86, 0xd7, 0x72, 0x69, 0x6e, 0xe4,
	0xa4, 0x94, 0xc1, 0xa3, 0x5c, 0x65, 0x44, 0xb4, 0x04, 0xd9, 0x76, 0x07, 0x89, 0x8a, 0xeb, 0xb9,
	0x16, 0xc9, 0x8d, 0xb2, 0xac, 0x98, 0xee, 0xae, 0x6f, 0x86, 0xcb, 0x21, 0xab, 0xc7, 0x70, 0xaf,
	0x04, 0x4e, 0xd5, 0x35, 0x69, 0xcb, 0x27, 0xb9, 0xcc, 0x82, 0xb6, 0x38, 0x69, 0x4c, 0xf3, 0xf5,
	0x6d, 0xb9, 0x8c, 0x6b, 0x70, 0x33, 0x16, 0xdb, 0x33, 0xe2, 0xda, 0x8e, 0x5b, 0xed, 0xa2, 0xbe,
	0xdd, 0x6a, 0x34, 0x4c, 0xff, 0x70, 0x18, 0xd4, 0x11, 0xa4, 0x6b, 0x66, 0x50, 0x63, 0x58, 0x4f,
	0x1a, 0xec, 0x1b, 0xff, 0xae, 0xc1, 0xe5, 0x98, 0xa9, 0x27, 0x9e, 0x65, 0xd6, 0x57, 0x2d, 0x8b,
	0xc5, 0x77, 0xda, 0xd9, 0x48, 0x8a, 0x5f, 0x4f, 0x8e, 0xff, 0x19, 0xa0, 0x08, 0xab, 0xcf, 0xb3,
	0x86, 0xed, 0xe5, 0xc4, 0xca, 0xb5, 0xfc, 0x69, 0xe9, 0x65, 0xcc, 0xb4, 0xe3, 0x4b, 0xf8, 0x67,
	0x0d, 0xae, 0xc4, 0xe4, 0x1e, 0x7a, 0x3e, 0x71, 0xaa, 0xee, 0x1b, 0x70, 0xff, 0x3e, 0x20, 0xab,
	0xe5, 0xfb, 0xc4, 0xa5, 0x91, 0xe3, 0x27, 0xdc, 0xef, 0xea, 0x9d, 0x11, 0x3c, 0xdd, 0xf3, 0x87,
	0xbf, 0x51, 0x8e, 0xdf, 0x4e, 0x24, 0x81, 0xa2, 0xf9, 0xa9, 0xbd, 0x56, 0x7e, 0xea, 0x7d, 0xf2,
	0x13, 0xff, 0xa1, 0x42, 0xf4, 0xdc, 0xb5, 0xea, 0xa6, 0xd3, 0x20, 0x36, 0xd3, 0x9c, 0x70, 0x16,
	0xb5, 0x61, 0xce, 0xa2, 0x3e, 0xc4, 0x59, 0xbc, 0x07, 0x19, 0xee, 0x73, 0x90, 0x4b, 0xb1, 0xaa,
	0x75, 0x39, 0xdf, 0x1b, 0x19, 0x43, 0xf2, 0xe2, 0xef, 0x75, 0x25, 0x06, 0xc6, 0xb7, 0x46, 0x9a,
	0x5e, 0xe0, 0x50, 0x62, 0xbf, 0x95, 0xa5, 0xa7, 0x27, 0x2c, 0x32, 0xf5, 0xdc, 0xb7, 0x13, 0x96,
	0x3f, 0xd5, 0x8a, 0x26, 0x7a, 0xf3, 0xfa, 0x4b, 0xe2, 0x52, 0x74, 0x19, 0xc6, 0x09, 0xad, 0xf1,
	0x26, 0xce, 0x20, 0x49, 0x1b, 0x63, 0x84, 0xd6, 0x58, 0xe3, 0x46, 0x1f, 0x42, 0xc6, 0xe6, 0x59,
	0x25, 0xe2, 0xbf, 0x9a, 0xef, 0x9b, 0x79, 0x1b, 0x67, 0x0c, 0x29, 0x80, 0x1e, 0x00, 0x74, 0x6b,
	0x86, 0x28, 0x0c, 0xc9, 0xe2, 0x9d, 0x1d, 0xda, 0x38, 0x63, 0x44, 0x64, 0x8a, 0xe3, 0x90, 0x69,
	0x9a, 0x87, 0x75, 0xcf, 0xb4, 0xf1, 0x4f, 0x3a, 0xbc, 0x93, 0xdc, 0x02, 0x62, 0x63, 0x01, 0xba,
	0x00, 0xba, 0x28, 0x1d, 0xe9, 0xe2, 0xe8, 0xf1, 0xd1, 0xbc, 0x5e, 0x5e, 0x33, 0x74, 0xc7, 0x46,
	0x77, 0x21, 0xbb, 0xc7, 0x8b, 0x61, 0xef, 0x3d, 0x9d, 0x16, 0x1c, 0x9d, 0x5d, 0x2d, 0xc0, 0x54,
	0x3d, 0x2c, 0xff, 0x5d, 0x91, 0x78, 0x81, 0x3b, 0xcb, 0xe8, 0x1d, 0x81, 0x22, 0xe4, 0xe2, 0x56,
	0x2a, 0x96, 0x4f, 0x4c, 0xea, 0xf9, 0x9d, 0xcd, 0x95, 0xa2, 0x17, 0x62, 0xd6, 0x4a, 0x9c, 0x0f,
	0xdd, 0x4f, 0xd0, 0x41, 0x0f, 0x2a, 0xac, 0x57, 0x8d, 0xb0, 0x5e, 0x35, 0x1b, 0x93, 0xdc, 0x39,
	0xd8, 0x08, 0x9b, 0x57, 0x45, 0xc1, 0x48, 0x32, 0x08, 0x93, 0x12, 0xa3, 0x39, 0x48, 0xef, 0xf9,
	0x5e, 0x43, 0x39, 0x01, 0x6c, 0x15, 0xe5, 0x40, 0xa7, 0x9e, 0x82, 0x8d, 0x4e, 0x3d, 0xfc, 0x83,
	0x06, 0x8b, 0x4a, 0xf5, 0x7c, 0x49, 0x7c, 0x67, 0xcf, 0x21, 0x76, 0x3c, 0x8c, 0x75, 0x38, 0x97,
	0x34, 0xec, 0xf1, 0x9d, 0x99, 0x3d, 0x3e, 0x9a, 0x9f, 0x51, 0x07, 0xbd, 0x19, 0x4b, 0x19, 0xf2,
	0x16, 0x21, 0xab, 0xa0, 0xc0, 0x3b, 0xf6, 0x94, 0x75, 0x32, 0xfc, 0xdf, 0x34, 0xb8, 0x11, 0xf3,
	0xee, 0xd3, 0x37, 0xeb, 0x1b, 0x86, 0x8c, 0xdc, 0xdc, 0x38, 0x5c, 0x92, 0x80, 0xae, 0xc3, 0x58,
	0xcf, 0xe4, 0xe9, 0x50, 0xf0, 0x77, 0x9a, 0x32, 0xe2, 0xc4, 0x3c, 0x28, 0x79, 0xee, 0x9e, 0xe3,
	0x37, 0x48, 0x72, 0x26, 0x6b, 0xc3, 0x67, 0xb2, 0xde, 0x37, 0x93, 0xf1, 0x2f, 0x3a, 0x5c, 0xef,
	0x77, 0x58, 0xcd, 0x7a, 0x38, 0x9f, 0xbd, 0xa5, 0xcd, 0x06, 0x65, 0x21, 0x15, 0x38, 0x55, 0x36,
	0xda, 0x4e, 0x1a, 0xe1, 0x27, 0x7e, 0xa5, 0x29, 0x73, 0x4d, 0xd9, 0x75, 0xa8, 0x41, 0xbe, 0x6a,
	0x91, 0xe0, 0xf4, 0xc9, 0x0b, 0x43, 0x86, 0x4f, 0xbd, 0x41, 0x4e, 0x8f, 0xdd, 0x60, 0x24, 0x01,
	0xdd, 0x83, 0xff, 0xed, 0x39, 0x7e, 0xe2, 0xcd, 0x8b, 0x5d, 0xa1, 0x8c, 0xf3, 0x8c, 0x1c, 0xbb,
	0x7a, 0xe1, 0x12, 0xcc, 0xc7, 0x1c, 0x5b, 0xb5, 0x6d, 0x7e, 0xe5, 0x91, 0xde, 0x2d, 0xc0, 0x28,
	0x37, 0xa2, 0xb8, 0x27, 0xd6, 0xf1, 0x43, 0xc0, 0x31, 0x25, 0x06, 0x69, 0x78, 0x2f, 0xc9, 0xb0,
	0x7a, 0xb0, 0x72, 0x73, 0x7a, 0x44, 0x28, 0x57, 0x12, 0x08, 0x2d, 0xf8, 0x73, 0xb8, 0xd6, 0x87,
	0x27, 0x68, 0x7a, 0x6e, 0x40, 0xc2, 0xe1, 0x49, 0x02, 0xa6, 0x25, 0x0f, 0x4f, 0x91, 0x5b, 0x5d,
	0x07, 0x43, 0xfc, 0xad, 0xae, 0x94, 0xb0, 0x55, 0xdb, 0x8e, 0x9d, 0x35, 0x19, 0xce, 0x7f, 0x72,
	0xd2, 0xd0, 0xc7, 0x30, 0xd7, 0xab, 0x67, 0x84, 0x57, 0x23, 0xb6, 0xb7, 0x93, 0xc6, 0xc5, 0xe4,
	0x6e, 0xb1, 0xed, 0x54, 0xfb, 0x36, 0x8c, 0x74, 0xbf, 0x86, 0xb1, 0x02, 0xcb, 0x83, 0x96, 0xf3,
	0xce, 0xe6, 0x7c, 0x0d, 0x77, 0x86, 0x90, 0x11, 0x9b, 0xb5, 0x0e, 0x63, 0x22, 0x22, 0xb9, 0x5b,
	0x4b, 0xf9, 0x41, 0xb5, 0x18, 0x1d, 0x51, 0x1c, 0xc0, 0x7b, 0x49, 0x05, 0xfe, 0xb0, 0x87, 0xaf,
	0xa8, 0xa4, 0x98, 0xbd, 0x99, 0x1f, 0xac, 0x43, 0x44, 0x8c, 0x56, 0xd4, 0xcb, 0xa7, 0xef, 0x59,
	0x24, 0x08, 0xd8, 0xfc, 0x54, 0x34, 0xa9, 0x55, 0x93, 0xf6, 0xde, 0x87, 0x51, 0x12, 0x2e, 0x4a,
	0x6b, 0x73, 0xf9, 0x3e, 0x93, 0x97, 0x21, 0x78, 0xf1, 0x15, 0x65, 0x40, 0xe3, 0x39, 0x2b, 0x00,
	0x7f, 0x0c, 0x73, 0xc9, 0x64, 0x81, 0xed, 0x2d, 0x18, 0x09, 0xc2, 0x05, 0x91, 0x99, 0xb3, 0xf9,
	0x44, 0x6e, 0xce, 0x83, 0x5f, 0x28, 0x08, 0x1a, 0x84, 0x5d, 0x7f, 0xc4, 0x08, 0xe7, 0xf9, 0xac,
	0x2e, 0x76, 0x10, 0x5c, 0x04, 0xb0, 0x25, 0x45, 0x46, 0x15, 0xa9, 0xed, 0x5d, 0x1a, 0xfe, 0x12,
	0x6e, 0x25, 0x6b, 0xee, 0xe4, 0xdc, 0x09, 0xc5, 0xc3, 0x5e, 0xb3, 0xf0, 0x2b, 0x1d, 0xfe, 0xdf,
	0xe3, 0x52, 0xcc, 0x34, 0xbf, 0xae, 0xe2, 0x7f, 0x71, 0x7f, 0x8b, 0xf6, 0x98, 0xd4, 0x6b, 0xf5,
	0x98, 0x74, 0xbf, 0x1e, 0x73, 0x03, 0xc6, 0x7d, 0x62, 0x39, 0x4d, 0x87, 0x44, 0xba, 0x91, 0x0c,
	0xa2, 0x4b, 0xc2, 0x3f, 0x6a, 0x4a, 0xbd, 0x94, 0xc8, 0xac, 0xef, 0x6c, 0x44, 0x4a, 0xb3, 0x30,
	0x1a, 0xbb, 0x56, 0x1b, 0x62, 0x1d, 0xdd, 0x81, 0x69, 0xd9, 0x58, 0xc4, 0x53, 0xa4, 0x52, 0xb9,
	0xa6, 0x04, 0x83, 0x30, 0x73, 0xd2, 0xc5, 0x54, 0x6f, 0x17, 0xcb, 0xca, 0x19, 0x52, 0x1f, 0x34,
	0x06, 0x6b, 0x94, 0xb8, 0xaa, 0xd4, 0xef, 0x04, 0x55, 0xe2, 0x68, 0x7c, 0x04, 0x19, 0xf9, 0xae,
	0xa2, 0x0d, 0xfa, 0xae, 0x22, 0x25, 0xf0, 0xaf, 0x1a, 0xe4, 0xd5, 0x91, 0x2c, 0x9c, 0xc1, 0x7a,
	0xfa, 0x3e, 0xc4, 0x28, 0x94, 0xf4, 0xfa, 0xa5, 0x27, 0xbe, 0x7e, 0xa1, 0x9b, 0x10, 0x79, 0x7c,
	0xe1, 0x55, 0x9d, 0xb7, 0x84, 0xa9, 0xee, 0x32, 0x2b, 0xe7, 0x5f, 0x28, 0xd0, 0x28, 0xcf, 0x64,
	0x9d, 0xf3, 0x97, 0xb0, 0xd9, 0x5a, 0xff, 0xcd, 0xc6, 0x6d, 0x58, 0x1a, 0x40, 0xbd, 0x80, 0xfe,
	0x13, 0x98, 0xe8, 0x7a, 0x27, 0x2b, 0xc7, 0x62, 0x7e, 0xc0, 0x67, 0x3c, 0x23, 0x2a, 0xfc, 0xee,
	0x73, 0xc8, 0xf5, 0x3a, 0x8e, 0x28, 0x03, 0xa9, 0xf5, 0x9d, 0x8d, 0xec, 0x19, 0x34, 0x0e, 0x23,
	0xeb, 0x46, 0x69, 0x65, 0x39, 0xab, 0x21, 0x80, 0xd1, 0x75, 0xa3, 0x74, 0x7f, 0xe5, 0x4e, 0x56,
	0x47, 0x13, 0x90, 0xe1, 0xdf, 0x2f, 0xb2, 0x29, 0x34, 0x09, 0x63, 0x4f, 0xb6, 0xb6, 0x9e, 0x96,
	0xb6, 0xca, 0x9b, 0xd9, 0xf4, 0xee, 0x28, 0x7b, 0x07, 0xbf, 0xfb, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x79, 0x9c, 0xa0, 0xfb, 0xc0, 0x17, 0x00, 0x00,
}
