// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/loomnetwork/go-loom/builtin/types/karma/karma.proto

/*
Package karma is a generated protocol buffer package.

It is generated from these files:
	github.com/loomnetwork/go-loom/builtin/types/karma/karma.proto

It has these top-level messages:
	KarmaParams
	KarmaParamsValidator
	KarmaParamsValidatorNewMaxKarma
	KarmaParamsValidatorNewOracle
	KarmaParamsMutableValidator
	KarmaSourceReward
	KarmaSource
	KarmaConfig
	KarmaState
	KarmaStateUser
	KarmaStateKeyUser
	KarmaInitRequest
	KarmaUserToken
	KarmaTotal
	KarmaDeploy
*/
package karma

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/loomnetwork/go-loom/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KarmaParams struct {
	MutableOracle bool                 `protobuf:"varint,1,opt,name=mutable_oracle,json=mutableOracle,proto3" json:"mutable_oracle,omitempty"`
	MaxKarma      int64                `protobuf:"varint,2,opt,name=max_karma,json=maxKarma,proto3" json:"max_karma,omitempty"`
	Oracle        *types.Address       `protobuf:"bytes,3,opt,name=Oracle" json:"Oracle,omitempty"`
	Sources       []*KarmaSourceReward `protobuf:"bytes,4,rep,name=sources" json:"sources,omitempty"`
	Validators    []*types.Validator   `protobuf:"bytes,5,rep,name=validators" json:"validators,omitempty"`
	DeployKarma   int64                `protobuf:"varint,6,opt,name=deploy_karma,json=deployKarma,proto3" json:"deploy_karma,omitempty"`
}

func (m *KarmaParams) Reset()                    { *m = KarmaParams{} }
func (m *KarmaParams) String() string            { return proto.CompactTextString(m) }
func (*KarmaParams) ProtoMessage()               {}
func (*KarmaParams) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{0} }

func (m *KarmaParams) GetMutableOracle() bool {
	if m != nil {
		return m.MutableOracle
	}
	return false
}

func (m *KarmaParams) GetMaxKarma() int64 {
	if m != nil {
		return m.MaxKarma
	}
	return 0
}

func (m *KarmaParams) GetOracle() *types.Address {
	if m != nil {
		return m.Oracle
	}
	return nil
}

func (m *KarmaParams) GetSources() []*KarmaSourceReward {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *KarmaParams) GetValidators() []*types.Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *KarmaParams) GetDeployKarma() int64 {
	if m != nil {
		return m.DeployKarma
	}
	return 0
}

type KarmaParamsValidator struct {
	Params    *KarmaParams     `protobuf:"bytes,1,opt,name=Params" json:"Params,omitempty"`
	Validator *types.Validator `protobuf:"bytes,2,opt,name=Validator" json:"Validator,omitempty"`
	Oracle    *types.Address   `protobuf:"bytes,3,opt,name=Oracle" json:"Oracle,omitempty"`
}

func (m *KarmaParamsValidator) Reset()                    { *m = KarmaParamsValidator{} }
func (m *KarmaParamsValidator) String() string            { return proto.CompactTextString(m) }
func (*KarmaParamsValidator) ProtoMessage()               {}
func (*KarmaParamsValidator) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{1} }

func (m *KarmaParamsValidator) GetParams() *KarmaParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *KarmaParamsValidator) GetValidator() *types.Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *KarmaParamsValidator) GetOracle() *types.Address {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type KarmaParamsValidatorNewMaxKarma struct {
	MaxKarma  int64            `protobuf:"varint,1,opt,name=max_karma,json=maxKarma,proto3" json:"max_karma,omitempty"`
	Validator *types.Validator `protobuf:"bytes,2,opt,name=Validator" json:"Validator,omitempty"`
}

func (m *KarmaParamsValidatorNewMaxKarma) Reset()         { *m = KarmaParamsValidatorNewMaxKarma{} }
func (m *KarmaParamsValidatorNewMaxKarma) String() string { return proto.CompactTextString(m) }
func (*KarmaParamsValidatorNewMaxKarma) ProtoMessage()    {}
func (*KarmaParamsValidatorNewMaxKarma) Descriptor() ([]byte, []int) {
	return fileDescriptorKarma, []int{2}
}

func (m *KarmaParamsValidatorNewMaxKarma) GetMaxKarma() int64 {
	if m != nil {
		return m.MaxKarma
	}
	return 0
}

func (m *KarmaParamsValidatorNewMaxKarma) GetValidator() *types.Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

type KarmaParamsValidatorNewOracle struct {
	NewOracle *types.Address   `protobuf:"bytes,1,opt,name=NewOracle" json:"NewOracle,omitempty"`
	Validator *types.Validator `protobuf:"bytes,2,opt,name=Validator" json:"Validator,omitempty"`
}

func (m *KarmaParamsValidatorNewOracle) Reset()         { *m = KarmaParamsValidatorNewOracle{} }
func (m *KarmaParamsValidatorNewOracle) String() string { return proto.CompactTextString(m) }
func (*KarmaParamsValidatorNewOracle) ProtoMessage()    {}
func (*KarmaParamsValidatorNewOracle) Descriptor() ([]byte, []int) {
	return fileDescriptorKarma, []int{3}
}

func (m *KarmaParamsValidatorNewOracle) GetNewOracle() *types.Address {
	if m != nil {
		return m.NewOracle
	}
	return nil
}

func (m *KarmaParamsValidatorNewOracle) GetValidator() *types.Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

type KarmaParamsMutableValidator struct {
	MutableOracle bool             `protobuf:"varint,1,opt,name=mutable_oracle,json=mutableOracle,proto3" json:"mutable_oracle,omitempty"`
	Validator     *types.Validator `protobuf:"bytes,2,opt,name=Validator" json:"Validator,omitempty"`
}

func (m *KarmaParamsMutableValidator) Reset()                    { *m = KarmaParamsMutableValidator{} }
func (m *KarmaParamsMutableValidator) String() string            { return proto.CompactTextString(m) }
func (*KarmaParamsMutableValidator) ProtoMessage()               {}
func (*KarmaParamsMutableValidator) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{4} }

func (m *KarmaParamsMutableValidator) GetMutableOracle() bool {
	if m != nil {
		return m.MutableOracle
	}
	return false
}

func (m *KarmaParamsMutableValidator) GetValidator() *types.Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

type KarmaSourceReward struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Reward int64  `protobuf:"varint,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (m *KarmaSourceReward) Reset()                    { *m = KarmaSourceReward{} }
func (m *KarmaSourceReward) String() string            { return proto.CompactTextString(m) }
func (*KarmaSourceReward) ProtoMessage()               {}
func (*KarmaSourceReward) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{5} }

func (m *KarmaSourceReward) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KarmaSourceReward) GetReward() int64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

type KarmaSource struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *KarmaSource) Reset()                    { *m = KarmaSource{} }
func (m *KarmaSource) String() string            { return proto.CompactTextString(m) }
func (*KarmaSource) ProtoMessage()               {}
func (*KarmaSource) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{6} }

func (m *KarmaSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KarmaSource) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type KarmaConfig struct {
	MutableOracle  bool                 `protobuf:"varint,1,opt,name=mutable_oracle,json=mutableOracle,proto3" json:"mutable_oracle,omitempty"`
	MaxKarma       int64                `protobuf:"varint,2,opt,name=max_karma,json=maxKarma,proto3" json:"max_karma,omitempty"`
	Oracle         *types.Address       `protobuf:"bytes,3,opt,name=Oracle" json:"Oracle,omitempty"`
	Sources        []*KarmaSourceReward `protobuf:"bytes,4,rep,name=sources" json:"sources,omitempty"`
	LastUpdateTime int64                `protobuf:"varint,5,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (m *KarmaConfig) Reset()                    { *m = KarmaConfig{} }
func (m *KarmaConfig) String() string            { return proto.CompactTextString(m) }
func (*KarmaConfig) ProtoMessage()               {}
func (*KarmaConfig) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{7} }

func (m *KarmaConfig) GetMutableOracle() bool {
	if m != nil {
		return m.MutableOracle
	}
	return false
}

func (m *KarmaConfig) GetMaxKarma() int64 {
	if m != nil {
		return m.MaxKarma
	}
	return 0
}

func (m *KarmaConfig) GetOracle() *types.Address {
	if m != nil {
		return m.Oracle
	}
	return nil
}

func (m *KarmaConfig) GetSources() []*KarmaSourceReward {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *KarmaConfig) GetLastUpdateTime() int64 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

type KarmaState struct {
	SourceStates   []*KarmaSource `protobuf:"bytes,1,rep,name=source_states,json=sourceStates" json:"source_states,omitempty"`
	LastUpdateTime int64          `protobuf:"varint,2,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
}

func (m *KarmaState) Reset()                    { *m = KarmaState{} }
func (m *KarmaState) String() string            { return proto.CompactTextString(m) }
func (*KarmaState) ProtoMessage()               {}
func (*KarmaState) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{8} }

func (m *KarmaState) GetSourceStates() []*KarmaSource {
	if m != nil {
		return m.SourceStates
	}
	return nil
}

func (m *KarmaState) GetLastUpdateTime() int64 {
	if m != nil {
		return m.LastUpdateTime
	}
	return 0
}

type KarmaStateUser struct {
	SourceStates []*KarmaSource `protobuf:"bytes,1,rep,name=source_states,json=sourceStates" json:"source_states,omitempty"`
	User         *types.Address `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	Oracle       *types.Address `protobuf:"bytes,3,opt,name=Oracle" json:"Oracle,omitempty"`
}

func (m *KarmaStateUser) Reset()                    { *m = KarmaStateUser{} }
func (m *KarmaStateUser) String() string            { return proto.CompactTextString(m) }
func (*KarmaStateUser) ProtoMessage()               {}
func (*KarmaStateUser) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{9} }

func (m *KarmaStateUser) GetSourceStates() []*KarmaSource {
	if m != nil {
		return m.SourceStates
	}
	return nil
}

func (m *KarmaStateUser) GetUser() *types.Address {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *KarmaStateUser) GetOracle() *types.Address {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type KarmaStateKeyUser struct {
	StateKeys []string       `protobuf:"bytes,1,rep,name=state_keys,json=stateKeys" json:"state_keys,omitempty"`
	User      *types.Address `protobuf:"bytes,2,opt,name=User" json:"User,omitempty"`
	Oracle    *types.Address `protobuf:"bytes,3,opt,name=Oracle" json:"Oracle,omitempty"`
}

func (m *KarmaStateKeyUser) Reset()                    { *m = KarmaStateKeyUser{} }
func (m *KarmaStateKeyUser) String() string            { return proto.CompactTextString(m) }
func (*KarmaStateKeyUser) ProtoMessage()               {}
func (*KarmaStateKeyUser) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{10} }

func (m *KarmaStateKeyUser) GetStateKeys() []string {
	if m != nil {
		return m.StateKeys
	}
	return nil
}

func (m *KarmaStateKeyUser) GetUser() *types.Address {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *KarmaStateKeyUser) GetOracle() *types.Address {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type KarmaInitRequest struct {
	Params *KarmaParams `protobuf:"bytes,1,opt,name=Params" json:"Params,omitempty"`
}

func (m *KarmaInitRequest) Reset()                    { *m = KarmaInitRequest{} }
func (m *KarmaInitRequest) String() string            { return proto.CompactTextString(m) }
func (*KarmaInitRequest) ProtoMessage()               {}
func (*KarmaInitRequest) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{11} }

func (m *KarmaInitRequest) GetParams() *KarmaParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type KarmaUserToken struct {
	Owner      *types.Address `protobuf:"bytes,1,opt,name=Owner" json:"Owner,omitempty"`
	TokenCount int64          `protobuf:"varint,2,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`
}

func (m *KarmaUserToken) Reset()                    { *m = KarmaUserToken{} }
func (m *KarmaUserToken) String() string            { return proto.CompactTextString(m) }
func (*KarmaUserToken) ProtoMessage()               {}
func (*KarmaUserToken) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{12} }

func (m *KarmaUserToken) GetOwner() *types.Address {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *KarmaUserToken) GetTokenCount() int64 {
	if m != nil {
		return m.TokenCount
	}
	return 0
}

type KarmaTotal struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *KarmaTotal) Reset()                    { *m = KarmaTotal{} }
func (m *KarmaTotal) String() string            { return proto.CompactTextString(m) }
func (*KarmaTotal) ProtoMessage()               {}
func (*KarmaTotal) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{13} }

func (m *KarmaTotal) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type KarmaDeploy struct {
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *KarmaDeploy) Reset()                    { *m = KarmaDeploy{} }
func (m *KarmaDeploy) String() string            { return proto.CompactTextString(m) }
func (*KarmaDeploy) ProtoMessage()               {}
func (*KarmaDeploy) Descriptor() ([]byte, []int) { return fileDescriptorKarma, []int{14} }

func (m *KarmaDeploy) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*KarmaParams)(nil), "karma.KarmaParams")
	proto.RegisterType((*KarmaParamsValidator)(nil), "karma.KarmaParamsValidator")
	proto.RegisterType((*KarmaParamsValidatorNewMaxKarma)(nil), "karma.KarmaParamsValidatorNewMaxKarma")
	proto.RegisterType((*KarmaParamsValidatorNewOracle)(nil), "karma.KarmaParamsValidatorNewOracle")
	proto.RegisterType((*KarmaParamsMutableValidator)(nil), "karma.KarmaParamsMutableValidator")
	proto.RegisterType((*KarmaSourceReward)(nil), "karma.KarmaSourceReward")
	proto.RegisterType((*KarmaSource)(nil), "karma.KarmaSource")
	proto.RegisterType((*KarmaConfig)(nil), "karma.KarmaConfig")
	proto.RegisterType((*KarmaState)(nil), "karma.KarmaState")
	proto.RegisterType((*KarmaStateUser)(nil), "karma.KarmaStateUser")
	proto.RegisterType((*KarmaStateKeyUser)(nil), "karma.KarmaStateKeyUser")
	proto.RegisterType((*KarmaInitRequest)(nil), "karma.KarmaInitRequest")
	proto.RegisterType((*KarmaUserToken)(nil), "karma.KarmaUserToken")
	proto.RegisterType((*KarmaTotal)(nil), "karma.KarmaTotal")
	proto.RegisterType((*KarmaDeploy)(nil), "karma.KarmaDeploy")
}

func init() {
	proto.RegisterFile("github.com/loomnetwork/go-loom/builtin/types/karma/karma.proto", fileDescriptorKarma)
}

var fileDescriptorKarma = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x95, 0x9b, 0x3f, 0xbf, 0x78, 0xdc, 0x46, 0xfd, 0xad, 0x2a, 0x64, 0x51, 0x4a, 0x83, 0x11,
	0xc8, 0xaa, 0x44, 0x82, 0xc2, 0xa1, 0xb7, 0x22, 0x54, 0x2e, 0xa8, 0x2a, 0x05, 0x93, 0x72, 0xb5,
	0x36, 0xf1, 0x92, 0x5a, 0xb1, 0xbd, 0xe9, 0xee, 0x9a, 0x34, 0x1f, 0x81, 0x0b, 0xdf, 0x8d, 0x2f,
	0xc3, 0x19, 0x79, 0x76, 0x13, 0xbb, 0x6d, 0x50, 0x53, 0xb8, 0x70, 0xb1, 0x3a, 0x6f, 0x66, 0xde,
	0x1b, 0x4f, 0xdf, 0x38, 0x70, 0x34, 0x8e, 0xd5, 0x45, 0x3e, 0xec, 0x8e, 0x78, 0xda, 0x4b, 0x38,
	0x4f, 0x33, 0xa6, 0x66, 0x5c, 0x4c, 0x7a, 0x63, 0xfe, 0xa2, 0x08, 0x7b, 0xc3, 0x3c, 0x4e, 0x54,
	0x9c, 0xf5, 0xd4, 0x7c, 0xca, 0x64, 0x6f, 0x42, 0x45, 0x4a, 0xf5, 0xb3, 0x3b, 0x15, 0x5c, 0x71,
	0xd2, 0xc0, 0xe0, 0xe1, 0xcb, 0x3b, 0x68, 0x74, 0x3b, 0x3e, 0x75, 0xa3, 0xf7, 0xd3, 0x02, 0xe7,
	0xa4, 0xe8, 0xfd, 0x40, 0x05, 0x4d, 0x25, 0x79, 0x06, 0xed, 0x34, 0x57, 0x74, 0x98, 0xb0, 0x90,
	0x0b, 0x3a, 0x4a, 0x98, 0x6b, 0x75, 0x2c, 0xbf, 0x15, 0x6c, 0x19, 0xf4, 0x0c, 0x41, 0xb2, 0x0b,
	0x76, 0x4a, 0xaf, 0x42, 0x54, 0x75, 0x37, 0x3a, 0x96, 0x5f, 0x0b, 0x5a, 0x29, 0xbd, 0x42, 0x26,
	0xd2, 0x81, 0xa6, 0x2e, 0x73, 0x6b, 0x1d, 0xcb, 0x77, 0xfa, 0xad, 0xee, 0x9b, 0x28, 0x12, 0x4c,
	0xca, 0xc0, 0xe0, 0xa4, 0x0f, 0xff, 0x49, 0x9e, 0x8b, 0x11, 0x93, 0x6e, 0xbd, 0x53, 0xf3, 0x9d,
	0xbe, 0xdb, 0xd5, 0x6f, 0x83, 0x04, 0x9f, 0x30, 0x15, 0xb0, 0x19, 0x15, 0x51, 0xb0, 0x28, 0x24,
	0x07, 0x00, 0x5f, 0x69, 0x12, 0x47, 0x54, 0x71, 0x21, 0xdd, 0x06, 0xb6, 0x41, 0xf7, 0xf3, 0x02,
	0x0a, 0x2a, 0x59, 0xf2, 0x04, 0x36, 0x23, 0x36, 0x4d, 0xf8, 0xdc, 0x4c, 0xd8, 0xc4, 0x09, 0x1d,
	0x8d, 0xa1, 0x86, 0xf7, 0xdd, 0x82, 0x9d, 0xca, 0x8b, 0x2f, 0x79, 0xc8, 0x01, 0x34, 0x35, 0x84,
	0x6f, 0xee, 0xf4, 0x49, 0x75, 0x34, 0x9d, 0x09, 0x4c, 0x05, 0xf1, 0xc1, 0x5e, 0x36, 0xe2, 0x1a,
	0xae, 0x8f, 0x54, 0x26, 0xef, 0xde, 0x89, 0x77, 0x01, 0xfb, 0xab, 0xe6, 0x79, 0xcf, 0x66, 0xa7,
	0x8b, 0xc5, 0x5e, 0xdb, 0xba, 0x75, 0x63, 0xeb, 0x6b, 0xcf, 0xe2, 0x5d, 0xc2, 0xde, 0x6f, 0x94,
	0xcc, 0xbf, 0xe7, 0x39, 0xd8, 0xcb, 0xc0, 0x6c, 0xa1, 0x9c, 0xb7, 0x4c, 0xdd, 0x43, 0x32, 0x83,
	0xdd, 0x8a, 0xe4, 0xa9, 0xf6, 0x52, 0xb9, 0x9d, 0x35, 0x5d, 0xb7, 0xbe, 0xde, 0x6b, 0xf8, 0xff,
	0x96, 0x95, 0x08, 0x81, 0x7a, 0x46, 0x53, 0xcd, 0x6d, 0x07, 0xf8, 0x37, 0x79, 0x00, 0x4d, 0x81,
	0x59, 0xe3, 0x62, 0x13, 0x79, 0x87, 0xe6, 0x2c, 0x34, 0xc1, 0xca, 0xd6, 0x1d, 0x68, 0x8c, 0x78,
	0x9e, 0x29, 0xd3, 0xa9, 0x03, 0xef, 0xc7, 0xe2, 0xa0, 0x8e, 0x79, 0xf6, 0x25, 0x1e, 0xff, 0xc3,
	0x07, 0xe5, 0xc3, 0x76, 0x42, 0xa5, 0x0a, 0xf3, 0x69, 0x44, 0x15, 0x0b, 0x55, 0x9c, 0x32, 0xb7,
	0x81, 0xca, 0xed, 0x02, 0x3f, 0x47, 0x78, 0x10, 0xa7, 0xcc, 0xe3, 0x00, 0x9a, 0x47, 0x51, 0xc5,
	0xc8, 0x21, 0x6c, 0x69, 0x8a, 0x50, 0x16, 0x71, 0x71, 0x27, 0xb5, 0x9b, 0x77, 0x62, 0x14, 0x37,
	0x75, 0x21, 0xf6, 0xad, 0x16, 0xdc, 0x58, 0x29, 0xf8, 0xcd, 0x82, 0x76, 0xa9, 0x78, 0x2e, 0x99,
	0xf8, 0x73, 0xd5, 0x47, 0x50, 0x2f, 0x08, 0x8c, 0x5f, 0xca, 0xd5, 0x21, 0xba, 0xc6, 0x5d, 0x8a,
	0x85, 0x95, 0x0a, 0xba, 0x13, 0x36, 0xc7, 0xb6, 0x3d, 0x00, 0x1c, 0x23, 0x9c, 0xb0, 0xb9, 0x1e,
	0xc5, 0x0e, 0x6c, 0x69, 0x2a, 0xfe, 0x5e, 0xf3, 0x08, 0xb6, 0x51, 0xf3, 0x5d, 0x16, 0xab, 0x80,
	0x5d, 0xe6, 0x4c, 0xaa, 0xfb, 0x7c, 0x97, 0xbc, 0x8f, 0x66, 0x7d, 0x85, 0xdc, 0x80, 0x4f, 0x58,
	0x46, 0x1e, 0x43, 0xe3, 0x6c, 0x96, 0x31, 0x71, 0xeb, 0x9c, 0x35, 0x4c, 0xf6, 0xc1, 0x51, 0x45,
	0x61, 0x58, 0xb5, 0x34, 0x20, 0x74, 0x8c, 0xbe, 0xf6, 0x8c, 0x07, 0x06, 0x5c, 0xd1, 0xa4, 0xf4,
	0xbe, 0x55, 0xf5, 0xfe, 0x53, 0x63, 0xfd, 0xb7, 0xf8, 0x9d, 0x5d, 0x5d, 0x34, 0x6c, 0xe2, 0x0f,
	0xcf, 0xab, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x15, 0xdd, 0xdb, 0xf3, 0x06, 0x00, 0x00,
}
