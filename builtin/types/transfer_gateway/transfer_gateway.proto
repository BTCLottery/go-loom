syntax = "proto3";

import "github.com/loomnetwork/go-loom/types/types.proto";

message TransferGatewayState {
    uint64 last_eth_block = 1;
}

message TransferGatewayWithdrawalReceipt {
    bytes hash = 1;
    // Signature generated by the Oracle that signed the hash
    bytes signature = 2;
}

message TransferGatewayAccount {
    Address owner = 1;
    uint64 withdrawal_nonce = 2;
    TransferGatewayWithdrawalReceipt withdrawal_receipt = 3;
}

// Fungible Token Deposit (ETH or ERC20) made into the Gateway on Ethereum mainnet
message TransferGatewayTokenDeposit {
    // Token contract address, blank if ETH 
    Address token = 1;
    // Ethereum mainnet address of entity that made the deposit
    Address from = 2;
    // DAppChain address of entity that should receive the deposit
    Address to = 3;
    BigUInt amount = 4;
    uint64 eth_block = 5;
}

// Non-Fungible Token Deposit (ERC721) made into the Gateway on Ethereum mainnet
message TransferGatewayNFTDeposit {
    // Token contract address
    Address token = 1;
    Address from = 2;
    BigUInt uid = 3;
    uint64 eth_block = 4;
}

// Genesis

message TransferGatewayInitRequest {
    // List of oracles that the Gateway should accept data from, each oracle is identified by the
    // address of the validator node it runs in
    repeated Address oracles = 1;
}

// Request & Response

// Batch of events from the Gateway on Ethereum mainnet
message TransferGatewayProcessEventBatchRequest {
    repeated TransferGatewayTokenDeposit ft_deposits = 1;
    repeated TransferGatewayNFTDeposit nft_deposits = 2;
}

message TransferGatewayStateRequest {
}

message TransferGatewayStateResponse {
    TransferGatewayState state = 1;
}

message TransferGatewayWithdrawERC721Request {
    // ID of ERC721 token
    BigUInt token_id = 1;
    // DAppChain address of ERC721 contract token belongs to
    Address token_contract = 2;
    // DAppChain address of the current owner of the token
    //Address token_owner = 3;
}

message TransferGatewayWithdrawalReceiptRequest {
    Address owner = 1;
}

message TransferGatewayWithdrawalReceiptResponse {
    TransferGatewayWithdrawalReceipt receipt = 1;
}
